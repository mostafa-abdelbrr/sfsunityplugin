<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartFoxClient</name>
    </assembly>
    <members>
        <member name="T:SmartFoxClientAPI.Data.Buddy">
            <summary>Buddy is the class representing a players buddy.<br/>
            This class is used internally by the <see cref="T:SmartFoxClientAPI.SmartFoxClient"/> class; also, Buddy objects are returned by various methods and events of the SmartFoxServer API.</summary>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            in the provided examples, <c>buddy</c> always indicates a Buddy instance.</para>
            
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary><see cref="M:SmartFoxClientAPI.Data.Buddy.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,System.Collections.Hashtable)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,System.Collections.Hashtable)">
            <summary>
            Buddy constructor.
            </summary>
            
            <param name="id">the buddy id</param>
            <param name="name">the buddy name</param>
            <param name="isOnline"><c>true</c> if the buddy is online</param>
            <param name="isBlocked"><c>true</c> if the buddy is blocked</param>
            <param name="variables">buddy variables</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.GetId">
            <summary>
            Get the id of the buddy.
            </summary>
            
            <returns>The id of the buddy</returns>
            
            <example>
            <code>
            			Trace.WriteLine("Buddy id:" + buddy.GetId());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Buddy.GetName"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.GetName">
            <summary>
            Get the name of the buddy.
            </summary>
            
            <returns>The name of the buddy</returns>
            
            <example><code>
            			Trace.WriteLine("Buddy name:" + buddy.GetName());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Buddy.GetId"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.IsOnline">
            <summary>
            A boolean flag indicating if the user is online
            </summary>
            
            <returns><c>true</c> if the buddy is online</returns>
            
            <example>
            <code>
            			if (buddy.IsOnline())
            				Trace.WriteLine("Buddy is online");
            			</code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.IsBlocked">
            <summary>
            A boolean flag indicating if the user is blocked
            </summary>
            
            <returns><c>true</c> if the buddy is blocked</returns>
            
            <example>
            <code>
            			if (buddy.IsBlocked())
            				Trace.WriteLine("Buddy is blocked");
            			</code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.GetVariables">
            <summary>
            Get the buddy variables.
            </summary>
            
            <returns>The buddy variables</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.GetVariable(System.String)">
            <summary>
            Get the buddy variables.
            </summary>
            
            <returns>The buddy variable for the given key</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.SetVariable(System.String,System.Object)">
            <summary>
            Adds or changes a given buddy variable
            </summary>
            
            <example>
            <code>
            buddy.SetVariable("nickname", "Jester");
            </code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.SetVariables(System.Collections.Hashtable)">
            <summary>
            Overrides the buddy variables with a complete new set of variables
            </summary>
            
            <example>
            <code>
            Hashtable newVariables = new Hashtable();  
            buddy.SetVariables(newVariables);
            </code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Buddy.SetBlocked(System.Boolean)">
            <summary>
            Sets blocked status for buddy
            </summary>
            
            <example>
            <code>
            buddy.SetBlocked(true);
            </code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Data.RoomVariable">
            <summary>RoomVariable is the class representing a rooms variables.<br/>
            This class is used internally by the <see cref="T:SmartFoxClientAPI.SmartFoxClient"/> class; also, RoomVariable objects are returned by various methods and events of the SmartFoxServer API.</summary>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            in the provided examples, <c>room</c> always indicates a Room instance.</para>
            
            <para><b>Version:</b><br/>
            1.1.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.#ctor(System.String,System.Object)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.RoomVariable.#ctor(System.String,System.Object,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.RoomVariable.#ctor(System.String,System.Object,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.#ctor(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Room variable constructor.
            </summary>
            
            <param name="name">the variable name</param>
            <param name="value">the variable value</param>
            <param name="isPrivate"><c>true</c> if the variable is private</param>
            <param name="isPersistent"><c>true</c> if the variable is persistent</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.GetName">
            <summary>
            Get the name of the variable.
            </summary>
            
            <returns>The name of the variable</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.GetValue">
            <summary>
            Get the value of the variable.
            </summary>
            
            <returns>The value of the variable</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.IsPrivate">
            <summary>
            A boolean flag indicating if the variable is private
            </summary>
            
            <returns><c>true</c> if the variable is private</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.RoomVariable.IsPersistent">
            <summary>
            A boolean flag indicating if the variable is persistent
            </summary>
            
            <returns><c>true</c> if the variable is persistent</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent">
             <summary>SFSEvent is the class representing all events dispatched by the <see>SmartFoxClient</see> instance.<br/>
             The SFSEvent class uses delegates to callback on specific event types.
             </summary>
             
             <example>The following example show a generic usage of a SFSEvent. Please refer to the specific events for the return signature/parameters.
             			<code>
             			using SmartFoxClientAPI;
                      using SmartFoxClientAPI.Data;
                       
                      public class MyTest
             			{
            				private SmartFoxClient smartFox;
            					
            				public function MyTest()
            				{
            					// Create instance
            					smartFox = new SmartFoxClient();
            						
            					// Add event handler for connection 
            					SFSEvent.onConnection += OnConnection;
            						
            					// Connect to server
            					smartFox.Connect("127.0.0.1", 9339)	
            				}
            					
            				// Handle connection event
            				public void OnConnection(bool success, string error)
            				{
            					if (success)
            						Trace.WriteLine("Great, successfully connected!");
            					else
            						Trace.WriteLine("Ouch, connection failed!");
            				}	
             			}
             			</code>
             			<b>NOTE</b>: in the following examples, <c>smartFox</c> always indicates a SmartFoxClient instance.
             </example>
             
             <remarks>
             <para><b>Version:</b><br/>
             1.1.0</para>
             
             <para><b>Author:</b><br/>
             Thomas Hentschel Lund<br/>
             			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
             			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
             (c) 2008,2009 gotoAndPlay()<br/>
                      <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
             			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
             </para>
             </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onAdminMessage">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnAdminMessageDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onBuddyList">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onBuddyListError">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onBuddyListUpdate">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onBuddyPermissionRequest">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onBuddyRoom">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyRoomDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onConfigLoadFailure">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadFailureDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onConfigLoadSuccess">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadSuccessDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onConnection">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onConnectionLost">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionLostDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onCreateRoomError">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnCreateRoomErrorDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onDebugMessage">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnDebugMessageDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onExtensionResponse">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onJoinRoom">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onJoinRoomError">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onLogin">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnLoginDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onLogout">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnLogoutDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onModeratorMessage">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnModeratorMessageDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onObjectReceived">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnObjectReceivedDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onPlayerSwitched">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnPlayerSwitchedDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onPrivateMessage">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnPrivateMessageDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onPublicMessage">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnPublicMessageDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRandomKey">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRandomKeyDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRoomAdded">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRoomDeleted">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomDeletedDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRoomLeft">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomLeftDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRoomListUpdate">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomListUpdateDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRoomVariablesUpdate">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomVariablesUpdateDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onRoundTripResponse">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnRoundTripResponseDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onSpectatorSwitched">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnSpectatorSwitchedDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onUserCountChange">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onUserEnterRoom">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnUserEnterRoomDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onUserLeaveRoom">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnUserLeaveRoomDelegate"/></summary>
        </member>
        <member name="F:SmartFoxClientAPI.SFSEvent.onUserVariablesUpdate">
            <summary><see cref="T:SmartFoxClientAPI.SFSEvent.OnUserVariablesUpdateDelegate"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SFSEvent.#ctor(System.String,System.Collections.Hashtable)">
            <summary>SFSEvent contructor.</summary>
            
            <param name="type">the event's type (see the constants in this class).</param>
            <param name="parameters">the parameters object for the event.</param>
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.SFSEvent.GetType">
            <summary>
            Get type of event
            </summary>
            
            <returns>Type of event</returns>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SFSEvent.GetParameter(System.String)">
            <summary>
            Get a specific parameter for the event
            </summary>
            
            <returns>Requested parameter</returns>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnAdminMessageDelegate">
            <summary>
            Dispatched when a message from the Administrator is received.<br/>
            Admin messages are special messages that can be sent by an Administrator to a user or group of users.
            </summary>
            
            <param name="message">the Administrator's message</param>
            
            <example>The following example shows how to handle a message coming from the Administrator.
            			<code>
            			SFSEvent.onAdminMessage += OnAdminMessage;
            			
            			public void OnAdminMessage(string message)
            			{
            				Trace.WriteLine("Administrator said: " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnModeratorMessageDelegate"/>
            
            <remarks>
            <para>
            All client applications should handle this event, or users won't be be able to receive important admin notifications!
            </para>
            
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate">
            <summary>
            Dispatched when the buddy list for the current user is received or a buddy is added/removed.
            </summary>
            
            <param name="buddyList">the buddy list. Refer to the <see>buddyList</see> property for a description of the buddy object's properties.</param>
            
            <example>The following example shows how to retrieve the properties of each buddy when the buddy list is received.
            			<code>
            			SFSEvent.onBuddyList += OnBuddyList;
            			
            			smartFox.LoadBuddyList();
            
            			public void OnBuddyList(ArrayList buddyList)
            			{
            				foreach (Buddy buddy in buddyList)
            				{
            					Trace.WriteLine("Buddy id: " + buddy.GetId());
            					Trace.WriteLine("Buddy name: " + buddy.GetName());
            					Trace.WriteLine("Is buddy online? " + buddy.IsOnline());
            					Trace.WriteLine("Is buddy blocked? " + buddy.IsBlocked());
            					
            					Trace.WriteLine("Buddy Variables:");
            					foreach (string v in buddy.GetVariables().Keys)
            						Trace.WriteLine("\t" + v + " -- " + buddy.GetVariable{v});
            				}
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyRoomDelegate"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadBuddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.AddBuddy(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.RemoveBuddy(System.String)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate">
            <summary>
            Dispatched when an error occurs while loading the buddy list.
            </summary>
            
            <param name="error">the error message</param>
            
            <example>The following example shows how to handle a potential error in buddy list loading.
            			<code>
            			SFSEvent.onBuddyListError += OnBuddyListError;
            			
            			public void OnBuddyListError(string error)
            			{
            				Trace.WriteLine("An error occurred while loading the buddy list: " + error);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate">
            <summary>
            Dispatched when the status or variables of a buddy in the buddy list change.
            </summary>
            
            <param name="buddy">an object representing the buddy whose status or Buddy Variables have changed. Refer to the <see cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/> property for a description of the buddy object's properties.</param>
            
            <example>The following example shows how to handle the online status change of a buddy.
            			<code>
            			SFSEvent.onBuddyListUpdate += OnBuddyListUpdate;
            			
            			public void OnBuddyListUpdate(Buddy buddy)
            			{
            				string name = buddy.GetName();
            				string status = (buddy.IsOnline()) ? "online" : "offline";
            
            				Trace.WriteLine("Buddy " + name + " is currently " + status);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyBlockStatus(System.String,System.Boolean)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate">
            <summary>
            Dispatched when the current user receives a request to be added to the buddy list of another user.
            </summary>
            
            <param name="sender">the name of the user requesting to add the current user to his/her buddy list</param>
            <param name="message">a message accompaining the permission request. This message can't be sent from the client-side, but it's part of the advanced server-side buddy list features.</param>
            
            <example>The following example shows how to handle the request to be added to a buddy list.
            			<code>
            			SFSEvent.onBuddyPermissionRequest += OnBuddyPermissionRequest;
            			
            			public void OnBuddyPermissionRequest(string sender, string message)
            			{
            			    Trace.WriteLine("Buddy permission request from " + sender + " asking " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.AddBuddy(System.String)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnBuddyRoomDelegate">
            <summary>
            Dispatched in response to a <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyRoom(SmartFoxClientAPI.Data.Buddy)"/> request.
            </summary>
            
            <param name="idList">the list of id of the rooms in which the buddy is currently logged; if users can't be present in more than one room at the same time, the list will contain one room id only, at 0 index.</param>
            
            <example>The following example shows how to join the same room in which the buddy currently is.
            			<code>
            			SFSEvent.onBuddyRoom += OnBuddyRoom;
            			
            			Buddy buddy = smartFox.GetBuddyByName("jack");
            			smartFox.GetBuddyRoom(buddy);
            			
            			public void OnBuddyRoom(ArrayList idList)
            			{
            				// Reach the buddy in his room
            				smartFox.Join(idList[0]);
            			}
            			</code>
            	</example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyRoom(SmartFoxClientAPI.Data.Buddy)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadFailureDelegate">
            <summary>
            Dispatched when an error occurs while loading the external SmartFoxClient configuration file.
            </summary>
            
            <param name="message">the error message.</param>
            
            <example>The following example shows how to handle a potential error in configuration loading.
            			<code>
            			SFSEvent.onConfigLoadFailure += OnConfigLoadFailure;
            			
            			smartFox.LoadConfig("testEnvironmentConfig.xml");
            			
            			public void OnConfigLoadFailure(string message)
            			{
            				Trace.WriteLine("Failed loading config file: " + message);
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadSuccessDelegate"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadSuccessDelegate">
            <summary>
            Dispatched when the external SmartFoxClient configuration file has been loaded successfully.<br/>
            This event is dispatched only if the <i>autoConnect</i> parameter of the <see cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/> method is set to <c>true</c> otherwise the connection is made and the <see cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionDelegate"/> event fired.
            </summary>
            
            <example>The following example shows how to handle a successful configuration loading.
            			<code>
            			SFSEvent.onConfigLoadSuccess += OnConfigLoadSuccess;
            			
            			smartFox.LoadConfig("testEnvironmentConfig.xml", false);
            			
            			public void OnConfigLoadSuccess()
            			{
            				Trace.WriteLine("Config file loaded, now connecting...");
            				
            				smartFox.Connect(smartFox.ipAddress, smartFox.port);
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadFailureDelegate"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnConnectionDelegate">
             <summary>
             Dispatched in response to the <see cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/> request.<br/>
             The connection to SmartFoxServer may have succeeded or failed: the <i>success</i> parameter must be checked.
             </summary>
             
             <param name="success">the connection result: <c>true</c> if the connection succeeded, <c>false</c> if the connection failed.</param>
             <param name="error">the error message in case of connection failure.</param>
             
             <example>The following example shows how to handle the connection result.
             			<code>
             			SFSEvent.onConnection += OnConnection;
            						
            			smartFox.Connect("127.0.0.1", 9339);
            					
            			public void OnConnection(bool success, string error)
            			{
            				if (success)
            					Trace.WriteLine("Connection successful");
            				else
            					Trace.WriteLine("Connection failed. Reason: " + error);
            			}
             			</code>
             	</example>
             
             <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/>
             
             <remarks>
             <para><b>Version:</b><br/>
             SmartFoxServer Basic / Pro</para>
             </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnConnectionLostDelegate">
            <summary>
            Dispatched when the connection with SmartFoxServer is closed (either from the client or from the server).
            </summary>
            
            <example>The following example shows how to handle a "connection lost" event.
            			<code>
            			SFSEvent.onConnectionLost += OnConnectionLost;
            			
            			public void OnConnectionLost()
            			{
            				Trace.WriteLine("Connection lost!");
            				
            				// TODO: disable application interface
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Disconnect"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnCreateRoomErrorDelegate">
            <summary>
            Dispatched when an error occurs during the creation of a room.<br/>
            Usually this happens when a client tries to create a room but its name is already taken.
            </summary>
            
            <param name="error">the error message.</param>
            
            <example>The following example shows how to handle a potential error in room creation.
            			<code>
            			SFSEvent.onCreateRoomError += OnCreateRoomError;
            
                     Hashtable roomObj = new Hashtable();
            			roomObj.Add("name", "The Entrance");
            			roomObj.Add("maxUsers", 50);
            			
            			smartFox.CreateRoom(roomObj);
            			
            			public void OnCreateRoomError(string error)
            			{
            				Trace.WriteLine("Room creation error; the following error occurred: " + error);
            			}
            			</code>
            	</example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnDebugMessageDelegate">
            <summary>
            Dispatched when a debug message is traced by the SmartFoxServer API.<br/>
            In order to receive this event you have to previously set the <see cref="F:SmartFoxClientAPI.SmartFoxClient.debug"/> flag to <c>true</c>.
            </summary>
            
            <param name="message">the debug message.</param>
            
            <example>The following example shows how to handle a SmartFoxServer API debug message.
            			<code>
            			SFSEvent.onDebugMessage += OnDebugMessage;
            			
            			smartFox.debug = true;
            			
            			public void OnDebugMessage(string message)
            			{
            				Trace.WriteLine("[SFS DEBUG] " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.debug"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate">
            <summary>
            Dispatched when a command/response from a server-side extension is received.
            </summary>
            
            <param name="dataObj">an object containing all the data sent by the server-side extension; by convention, a string property called <b>_cmd</b> should always be present, to distinguish between different responses coming from the same extension.</param>
            <param name="type">one of the following response protocol types: <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_XML"/>, <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR"/>, <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_JSON"/>. By default <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_XML"/> is used.</param>
            
            <example>The following example shows how to handle an extension response.
            			<code>
            			SFSEvent.onExtensionResponse += OnExtensionResponse;
            			
            			public void OnExtensionResponse(object data, string type)
            			{
            				// Handle XML responses
            				if (type == SmartFoxClient.XTMSG_TYPE_XML)
            				{
            					SFSObject responseData = (SFSObject)data;
            					// TODO: check command and perform required actions
            				}
            				
            				// Handle RAW responses
            				else if (type == SmartFoxClient.XTMSG_TYPE_STR)
            				{
            					string responseData = (string)data;
            					// TODO: check command and perform required actions
            				}
            				
            				// Handle JSON responses
            				else if (type == SmartFoxClient.XTMSG_TYPE_JSON)
            				{
            					JsonData responseData = (JsonData)data;
            					// TODO: check command and perform required actions
            				}
            			}
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_XML"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_JSON"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate">
            <summary>
            Dispatched when a room is joined successfully.
            </summary>
            
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the joined room.</param>
            
            <example>The following example shows how to handle an successful room joining.
            			<code>
            			SFSEvent.onJoinRoom += OnJoinRoom;
            			
            			smartFox.JoinRoom("The Entrance");
            			
            			public void OnJoinRoom(Room room)
            			{
            				Trace.WriteLine("Room " + room.GetName() + " joined successfully");
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate">
            <summary>
            Dispatched when an error occurs while joining a room.<br/>
            This error could happen, for example, if the user is trying to join a room which is currently full.
            </summary>
            
            <param name="error">the error message.</param>
            
            <example>The following example shows how to handle a potential error in room joining.
            			<code>
            			SFSEvent.onJoinRoomError += OnJoinRoomError;
            			
            			smartFox.JoinRoom("The Entrance");
            			
            			public void OnJoinRoomError(string error)
            			{
            				Trace.WriteLine("Room join error; the following error occurred: " + error);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnLoginDelegate">
            <summary>
            Dispatched when the login to a SmartFoxServer zone has been attempted.
            </summary>
            
            <param name="success">the login result: <c>true</c> if the login to the provided zone succeeded; <c>false</c> if login failed.</param>
            <param name="name">the user's actual username.</param>
            <param name="error">the error message in case of login failure.</param>
            
            <example>The following example shows how to handle the login result.
            			<code>
            			SFSEvent.onLogin += OnLogin;
            			
            			smartFox.Login("simpleChat", "jack");
            			
            			public void OnLogin(bool success, string name, string error)
            			{
            				if (success)
            					Trace.WriteLine("Successfully logged in as " + name);
            				else
            					Trace.WriteLine("Zone login error; the following error occurred: " + error);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnLogoutDelegate"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Login(System.String,System.String,System.String)"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            the server sends the username back to the client because not all usernames are valid: for example, those containing bad words may have been filtered during the login process.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnLogoutDelegate">
            <summary>
            Dispatched when the user logs out successfully.<br/>
            After a successful logout the user is still connected to the server, but he/she has to login again into a zone, in order to be able to interact with the server.
            </summary>
            
            <example>The following example shows how to handle the "logout" event.
            			<code>
            			SFSEvent.onLogout += OnLogout;
            			
            			smartFox.Logout();
            			
            			public void OnLogout()
            			{
            				Trace.WriteLine("Logged out successfully");
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnLoginDelegate"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Logout"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.5.5</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnModeratorMessageDelegate">
            <summary>
            Dispatched when a message from a Moderator is received.
            </summary>
            
            <param name="message">the Moderator's message.</param>
            <param name="sender">the <see cref="T:SmartFoxClientAPI.Data.User"/> object representing the Moderator.</param>
            
            <example>The following example shows how to handle a message coming from a Moderator.
            			<code>
            			SFSEvent.onModeratorMessage += OnModeratorMessage;
            			
            			public void OnModeratorMessage(string message, User sender)
            			{
            				Trace.WriteLine("Moderator " + sender.GetName() + " said: " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnAdminMessageDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.4.5</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnObjectReceivedDelegate">
            <summary>
            Dispatched when an SFSObject is received.
            </summary>
            
            <param name="obj">the <see cref="T:SmartFoxClientAPI.Data.SFSObject"/> object received.</param>
            <param name="sender">the <see cref="T:SmartFoxClientAPI.Data.User"/> object representing the user that sent the SFSObject.</param>
            
            <example>The following example shows how to handle an Actionscript object received from a user.
            			<code>
            			SFSEvent.onObjectReceived += OnObjectReceived;
            			
            			public void OnObjectReceived(SFSObject obj, User sender)
            			{
            				// Assuming another client sent his X and Y positions in two properties called px, py
            				Trace.WriteLine("Data received from user: " + sender.GetName());
            				Trace.WriteLine("X = " + obj.GetString("px") + ", Y = " + obj.GetString("py"));
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.Data.SFSObject"/>
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendObject(SmartFoxClientAPI.Data.SFSObject,System.Int32)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendObjectToGroup(SmartFoxClientAPI.Data.SFSObject,System.Collections.ArrayList,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnPlayerSwitchedDelegate">
            <summary>
            Dispatched in response to the <see cref="M:SmartFoxClientAPI.SmartFoxClient.SwitchPlayer(System.Int32)"/> request.<br/>
            The request to turn a player into a spectator may fail if another user did the same before your request, and there was only one spectator slot available.
            </summary>
            
            <param name="success">the switch result: <c>true</c> if the player was turned into a spectator, otherwise <c>false</c>.</param>
            <param name="newId">the player id assigned by the server to the user.</param>
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the room where the switch occurred.</param>
            
            <example>The following example shows how to check the handle the player switch.
            			<code>
            			SFSEvent.onPlayerSwitched += OnPlayerSwitched;
            			
            			smartFox.SwitchPlayer();
            			
            			public void OnPlayerSwitched(bool success, int newId, Room room)
            			{
            				if (success)
            					Trace.WriteLine("You have been turned into a spectator; your id is " + newId);
            				else
            					Trace.WriteLine("The attempt to switch from player to spectator failed");
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetPlayerId"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SwitchPlayer(System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnPrivateMessageDelegate">
            <summary>
            Dispatched when a private chat message is received.
            </summary>
            
            <param name="message">the private message received.</param>
            <param name="sender">the <see cref="T:SmartFoxClientAPI.Data.User"/> object representing the user that sent the message; this property is undefined if the sender isn't in the same room of the recipient.</param>
            <param name="roomId">the id of the room where the sender is.</param>
            <param name="userId">the user id of the sender (useful in case of private messages across different rooms, when the <c>sender</c> object is not available).</param>
            
            <example>The following example shows how to handle a private message.
            			<code>
            			SFSEvent.onPrivateMessage += OnPrivateMessage;
            			
            			smartFox.SendPrivateMessage("Hallo Jack!", 22);
            			
            			public void OnPrivateMessage(string message, User sender, int roomId, int userId)
            			{
            				Trace.WriteLine("User " + sender.GetName() + " sent the following private message: " + .message);
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnPublicMessageDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendPrivateMessage(System.String,System.Int32,System.Int32)"/>
            
            <remarks>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.5.0 - <i>roomId</i> and <i>userId</i> parameters added.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnPublicMessageDelegate">
            <summary>
            Dispatched when a public chat message is received.
            </summary>
            
            <param name="message">the public message received.</param>
            <param name="sender">the <see cref="T:SmartFoxClientAPI.Data.User"/> object representing the user that sent the message.</param>
            <param name="roomId">the id of the room where the sender is.</param>
            
            @example	The following example shows how to handle a public message.
            			<code>
            			SFSEvent.onPublicMessage += OnPublicMessage;
            			
            			smartFox.SendPublicMessage("Hello world!");
            			
            			public void OnPublicMessage(string message, User sender, int roomId)
            			{
            				Trace.WriteLine("User " + sender.GetName() + " said: " + message);
            			}
            			</code>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnPrivateMessageDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendPublicMessage(System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRandomKeyDelegate">
            <summary>
            Dispatched in response to a <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetRandomKey"/> request.
            </summary>
            
            <param name="key">a unique random key generated by the server.</param>
            
            <example>The following example shows how to handle the key received from the server.
            			<code>
            			SFSEvent.onRandomKey += OnRandomKey;
            			
            			smartFox.GetRandomKey();
            			
            			public void OnRandomKey(string key)
            			{
            				Trace.WriteLine("Random key received from server: " + key);
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRandomKey"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate">
            <summary>
            Dispatched when a new room is created in the zone where the user is currently logged in.
            </summary>
            
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the room that was created.</param>
            
            <example>The following example shows how to handle a new room being created in the zone.
            			<code>
            			SFSEvent.onRoomAdded += OnRoomAdded;
            			
                     Hashtable roomObj = new Hashtable();
            			roomObj.Add("name", "The Entrance");
            			roomObj.Add("maxUsers", 15);
            			
            			smartFox.CreateRoom(roomObj);
            			
            			public void OnRoomAdded(Room room)
            			{
            				Trace.WriteLine("Room " + room.GetName() + " was created");
            				
            				// TODO: update available rooms list in the application interface
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomDeletedDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRoomDeletedDelegate">
            <summary>
            Dispatched when a room is removed from the zone where the user is currently logged in.
            </summary>
            
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the room that was removed.</param>
            
            <example>The following example shows how to handle a new room being removed in the zone.
            			<code>
            			SFSEvent.onRoomDeleted += OnRoomDeleted;
            			
            			public void OnRoomDeleted(Room room)
            			{
            				Trace.WriteLine("Room " + room.GetName() + " was removed");
            				
            				// TODO: update available rooms list in the application interface
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRoomLeftDelegate">
            <summary>
            Dispatched when a room is left in multi-room mode, in response of a <see cref="M:SmartFoxClientAPI.SmartFoxClient.LeaveRoom(System.Int32)"/> request.
            </summary>
            
            <param name="roomId">the id of the room that was left.</param>
            
            <example>The following example shows how to handle the "room left" event.
            			<code>
            			SFSEvent.onRoomLeft += OnRoomLeft;
            			
            			public void OnRoomLeft(int roomId)
            			{
            				Trace.WriteLine("You left room " + roomId);
            			}
            			</code>
            	</example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LeaveRoom(System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRoomListUpdateDelegate">
            <summary>
            Dispatched when the list of rooms available in the current zone is received.<br/>
            If the default login mechanism provided by SmartFoxServer is used, then this event is dispatched right after a successful login.<br/>
            This is because the SmartFoxServer API, internally, call the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList"/> method after a successful login is performed.<br/>
            If a custom login handler is implemented, the room list must be manually requested to the server by calling the mentioned method.
            </summary>
            
            <param name="roomList">a list of <see cref="T:SmartFoxClientAPI.Data.Room"/> objects for the zone logged in by the user.</param>
            
            <example>The following example shows how to handle the list of rooms sent by SmartFoxServer.
            			<code>
            			SFSEvent.onRoomListUpdate += OnRoomListUpdate;
            			
            			smartFox.Login("simpleChat", "jack");
            			
            			public void OnRoomListUpdate(Hashtable roomList)
            			{
            				// Dump the names of the available rooms in the "simpleChat" zone
            				foreach (Room room in roomList.Values)
            					Trace.WriteLine(room.GetName());
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRoomVariablesUpdateDelegate">
            <summary>
            Dispatched when Room Variables are updated.<br/>
            A user receives this notification only from the room(s) where he/she is currently logged in. Also, only the variables that changed are transmitted.
            </summary>
            
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the room where the update took place.</param>
            <param name="changedVars">a Hashtable with the names of the changed variables as keys.</param>
            
            <example>The following example shows how to handle an update in Room Variables.
            			<code>
            			SFSEvent.onRoomVariablesUpdate += OnRoomVariablesUpdate;
            			
            			public void OnRoomVariablesUpdate(Room room, Hashtable changedVars)
            			{
            				// Iterate on the 'changedVars' Hashtable to check which variables were updated
            				foreach (string v in changedVars.Keys)
            					Trace.WriteLine(v + " room variable was updated; new value is: " + room.getVariable(v));
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            the <c>changedVars</c> array contains the names of the changed variables only, not the actual values. To retrieve them the <see cref="M:SmartFoxClientAPI.Data.Room.GetVariable(System.String)"/> / <see cref="M:SmartFoxClientAPI.Data.Room.GetVariables"/> methods can be used.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnRoundTripResponseDelegate">
            <summary>
            Dispatched when a response to the <see cref="M:SmartFoxClientAPI.SmartFoxClient.RoundTripBench"/> request is received.<br/>
            The "roundtrip time" represents the number of milliseconds that it takes to a message to go from the client to the server and back to the client.<br/>
            A good way to measure the network lag is to send continuos requests (every 3 or 5 seconds) and then calculate the average roundtrip time on a fixed number of responses (i.e. the last 10 measurements).
            </summary>
            
            <param name="elapsed">the roundtrip time.</param>
            
            <example>The following example shows how to check the average network lag time.
            			<code>
            			SFSEvent.onRoundTripResponse += OnRoundTripResponse;
            			
            			int totalPingTime = 0;
            			int pingCount = 0;
            			
            			smartFox.RoundTripBench(); // TODO: this method must be called repeatedly every 3-5 seconds to have a significant average value
            			
            			public void OnRoundTripResponse(int elapsed)
            			{
            				int time = elapsed;
            				
            				// We assume that it takes the same time to the ping message to go from the client to the server
            				// and from the server back to the client, so we divide the elapsed time by 2.
            				totalPingTime += time / 2;
            				pingCount++;
            				
            				int avg = Math.Round(totalPingTime / pingCount);
            				
            				Trace.WriteLine("Average lag: " + avg + " milliseconds");
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.RoundTripBench"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnSpectatorSwitchedDelegate">
            <summary>
            Dispatched in response to the <see cref="M:SmartFoxClientAPI.SmartFoxClient.SwitchSpectator(System.Int32)"/> request.<br/>
            The request to turn a spectator into a player may fail if another user did the same before your request, and there was only one player slot available.
            </summary>
            
            <param name="success">the switch result: <c>true</c> if the spectator was turned into a player, otherwise <c>false</c>.</param>
            <param name="newId">the player id assigned by the server to the user.</param>
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the room where the switch occurred.</param>
            
            <example>The following example shows how to check the handle the spectator switch.
            			<code>
            			SFSEvent.onSpectatorSwitched += OnSpectatorSwitched;
            			
            			smartFox.SwitchSpectator();
            			
            			public void OnSpectatorSwitched(bool success, int newId, Room room)
            			{
            				if (success)
            					Trace.WriteLine("You have been turned into a player; your id is " + newId);
            				else
            					Trace.WriteLine("The attempt to switch from spectator to player failed");
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetPlayerId"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SwitchSpectator(System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate">
            <summary>
            Dispatched when the number of users and/or spectators changes in a room within the current zone.<br/>
            This event allows to keep track in realtime of the status of all the zone rooms in terms of users and spectators.<br/>
            In case many rooms are used and the zone handles a medium to high traffic, this notification can be turned off to reduce bandwidth consumption, since a message is broadcasted to all users in the zone each time a user enters or exits a room.
            </summary>
            
            <param name="room">the <see cref="T:SmartFoxClientAPI.Data.Room"/> object representing the room where the change occurred.</param>
            
            <example>The following example shows how to check the handle the spectator switch notification.
            			<code>
            			SFSEvent.onUserCountChange += OnUserCountChange;
            			
            			public void OnUserCountChange(Room room)
            			{
            				// Assuming this is a game room
            				
            				string roomName = room.GetName()
            				int playersNum = room.GetUserCount()
            				int spectatorsNum: = room.GetSpectatorCount()
            				
            				Trace.WriteLine("Room " + roomName + "has " + playersNum + " players and " + spectatorsNum + " spectators");
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserEnterRoomDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserLeaveRoomDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnUserEnterRoomDelegate">
            <summary>
            Dispatched when another user joins the current room.
            </summary>
            
            <param name="roomId">the id of the room joined by a user (useful in case multi-room presence is allowed).</param>
            <param name="user">the <see cref="T:SmartFoxClientAPI.Data.User"/> object representing the user that joined the room.</param>
            
            <example>The following example shows how to check the handle the user entering room notification.
            			<code>
            			SFSEvent.onUserEnterRoom += OnUserEnterRoom;
            			
            			public void OnUserEnterRoom(int roomId, User user)
            			{
            				Trace.WriteLine("User " + user.GetName() + " entered the room");
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserLeaveRoomDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnUserLeaveRoomDelegate">
            <summary>
            Dispatched when a user leaves the current room.<br/>
            This event is also dispatched when a user gets disconnected from the server.
            </summary>
            
            <param name="roomId">the id of the room left by a user (useful in case multi-room presence is allowed).</param>
            <param name="userId">the id of the user that left the room (or got disconnected).</param>
            <param name="userName">the name of the user.</param>
            
            <example>The following example shows how to check the handle the user leaving room notification.
            			<code>
            			SFSEvent.onUserLeaveRoom += OnUserLeaveRoom;
            			
            			public void OnUserLeaveRoom(int roomId, int userId, string userName)
            			{
            				trace.WriteLine("User " + userName + " left the room");
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserEnterRoomDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.SFSEvent.OnUserVariablesUpdateDelegate">
            <summary>
            Dispatched when a user in the current room updates his/her User Variables.
            </summary>
            
            <param name="user">the <see cref="T:SmartFoxClientAPI.Data.User"/> object representing the user who updated his/her variables.</param>
            <param name="changedVars">a Hashtable with the names of the changed variables as keys.</param>
            
            <example>The following example shows how to handle an update in User Variables.
            			<code>
            			SFSEvent.onUserVariablesUpdate += OnUserVariablesUpdate;
            			
            			public void OnUserVariablesUpdate(User user, Hashtable changedVars)
            			{
            				// We assume that each user has px and py variables representing the users's avatar coordinates in a 2D environment
            				
            				if (changedVars["px"] != null || changedVars["py"] != null)
            				{
            					Trace.WriteLine("User " + user.GetName() + " moved to new coordinates:");
            					Trace.WriteLine("\t px: " + user.GetVariable("px"));
            					Trace.WriteLine("\t py: " + user.GetVariable("py"));
            				}
            			}
            			</code>
            	</example>
            
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetUserVariables(System.Collections.Hashtable,System.Int32)"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            the <c>changedVars</c> array contains the names of the changed variables only, not the actual values. To retrieve them the <see cref="M:SmartFoxClientAPI.Data.User.GetVariable(System.String)"/> / <see cref="M:SmartFoxClientAPI.Data.User.GetVariables"/> methods can be used.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Http.RawProtocolCodec">
            <summary>Raw HTTP codec class</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Http.IHttpProtocolCodec">
            <summary>Interface class for HTTP protocol codecs</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.IHttpProtocolCodec.Encode(System.String,System.String)">
            <summary>Encode given message with given session id</summary>
            
            <param name="sessionId">Session id to use for encoding</param>
            <param name="message">Message to encode</param>
            
            <returns>Encoded message</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Http.IHttpProtocolCodec.Decode(System.String)">
            <summary>Decode given message</summary>
            
            <param name="message">Message to decode</param>
            
            <returns>Decoded message</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Http.RawProtocolCodec.Encode(System.String,System.String)">
            <summary>Encode given message with given session id</summary>
            
            <param name="sessionId">Session id to use for encoding</param>
            <param name="message">Message to encode</param>
            
            <returns>Encoded message</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Http.RawProtocolCodec.Decode(System.String)">
            <summary>Decode given message</summary>
            
            <param name="message">Message to decode</param>
            
            <returns>Decoded message</returns>
        </member>
        <member name="T:SmartFoxClientAPI.Data.Zone">
            <summary>The Zone class stores the properties of the current server zone.<br/>
            This class is used internally by the <see cref="T:SmartFoxClientAPI.SmartFoxClient"/> class.</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Zone.#ctor(System.String)">
            <summary>
            Zone constructor.
            </summary>
            
            <param name="name">the zone name</param>
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Zone.GetName">
            <summary>
            Get zone name
            </summary>
            
            <returns>Zone name</returns>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Zone.GetRoom(System.Int32)">
            <summary>
            Get room by given id
            </summary>
            
            <param name="id">id of the room</param>
            
            <returns>Room for given id</returns>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Zone.GetRoomByName(System.String)">
            <summary>
            Get room by given name
            </summary>
            
            <param name="name">name of the room</param>
            
            <returns>Room for given name</returns>
            
            @exclude
        </member>
        <member name="T:SmartFoxClientAPI.Util.XmlUtil">
            <summary>XML utility class</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.XmlUtil.GetString(System.Xml.XmlNode,System.String)">
             <summary>
             Convert given node and path to string
             </summary>
            
             <param name="node">Node to convert</param>
             <param name="path">Path to node</param>
             
             <returns>Converted string</returns>
             
             <remarks>
             <b>Version:</b><br/>
             SmartFoxServer Basic / Pro
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.XmlUtil.GetInt(System.Xml.XmlNode,System.String)">
             <summary>
             Convert given node and path to int
             </summary>
            
             <param name="node">Node to convert</param>
             <param name="path">Path to node</param>
             
             <returns>Converted int</returns>
             
             <remarks>
             <b>Version:</b><br/>
             SmartFoxServer Basic / Pro
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.XmlUtil.GetBool(System.Xml.XmlNode,System.String)">
             <summary>
             Convert given node and path to bool
             </summary>
            
             <param name="node">Node to convert</param>
             <param name="path">Path to node</param>
             
             <returns>Converted string</returns>
             
             <remarks>
             <b>Version:</b><br/>
             SmartFoxServer Basic / Pro
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.XmlUtil.GetSingleNode(System.Xml.XmlNode,System.String)">
             <summary>
             Return single node at given node and path
             </summary>
            
             <param name="node">Node</param>
             <param name="path">Path to node</param>
             
             <returns>Node</returns>
             
             <remarks>
             <b>Version:</b><br/>
             SmartFoxServer Basic / Pro
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.XmlUtil.GetNodeList(System.Xml.XmlNode,System.String)">
             <summary>
             Return list of nodes at given node and path
             </summary>
            
             <param name="node">Node</param>
             <param name="path">Path to node</param>
             
             <returns>Node list</returns>
             
             <remarks>
             <b>Version:</b><br/>
             SmartFoxServer Basic / Pro
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.XmlUtil.Dump(System.Xml.XmlNode,System.Int32)">
            <summary>
            Dump node and children
            </summary>
        </member>
        <member name="T:SmartFoxClientAPI.SmartFoxClient">
            <summary>SmartFoxServer .Net/Mono client API<br/>
            SmartFoxClient is the main class in the SmartFoxServer API.<br/>
            This class is responsible for connecting to the server and handling all related events.</summary>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            in the provided examples, <c>smartFox</c> always indicates a SmartFoxClient instance.</para>
            
            <para><b>Version:</b><br/>
            1.2.1</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008,2009 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_USER">
            <summary>
            Moderator message type: "to user".<br/>
            The Moderator message is sent to a single user.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_ROOM">
            <summary>
            Moderator message type: "to room".<br/>
            The Moderator message is sent to all the users in a room.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_ZONE">
            <summary>
            Moderator message type: "to zone".<br/>
            The Moderator message is sent to all the users in a zone.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_XML">
            <summary>
            Server-side extension request/response protocol: XML.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Pro
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR">
            <summary>
            Server-side extension request/response protocol: string (aka "raw protocol").
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Pro
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_JSON">
            <summary>
            Server-side extension request/response protocol: JSON.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Pro
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_DISCONNECTED">
            <summary>
            Connection mode: "disconnected".<br/>
            The client is currently disconnected from SmartFoxServer.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetConnectionMode"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_SOCKET">
            <summary>
            Connection mode: "socket".<br/>
            The client is currently connected to SmartFoxServer via socket.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetConnectionMode"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_HTTP">
            <summary>
            Connection mode: "http".<br/>
            The client is currently connected to SmartFoxServer via http.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetConnectionMode"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.ipAddress">
            <summary>
            The SmartFoxServer IP address.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.port">
            <summary>
            The SmartFoxServer connection port.<br/>
            The default port is <b>9339</b>.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.defaultZone">
            <summary>
            The default login zone.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.runInQueueMode">
            <summary>
            Enable/disable the queue mode for the API. Queue mode puts all network events onto a queue instead of directly calling the callbacks.<br/>
            The default value is <c>false</c>.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.ProcessEventQueue"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.blueBoxIpAddress">
            <summary>
            The BlueBox IP address.
            </summary>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.smartConnect"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.blueBoxPort">
            <summary>
            The BlueBox connection port.
            </summary>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.smartConnect"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.smartConnect">
            <summary>
            A boolean flag indicating if the BlueBox http connection should be used in case a socket connection is not available.<br/>
            The default value is <c>true</c>.
            </summary>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.buddyList">
            <summary>
            An array containing the objects representing each buddy of the user's buddy list.<br/>
            The buddy list can be iterated with a <c>foreach</c> loop, or a specific object can be retrieved by means of the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyById(System.Int32)"/> and <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyByName(System.String)"/> methods.
            </summary>
            
            <example>
            Each element in the buddy list is an object with the following properties:
            <list type="table">
            <listheader>
            <term>term</term>
            <description>description</description>
            </listheader>
            <item>
            <term>id</term>
            <description>(<b>int</b>) the buddy id.</description>
            </item><item>
            <term>name</term>
            <description>(<b>string</b>) the buddy name.</description>
            </item><item>
            <term>isOnline</term>
            <description>(<b>bool</b>) the buddy online status: <c>true</c> if the buddy is online; <c>false</c> if the buddy is offline.</description>
            </item><item>
            <term>isBlocked</term>
            <description>(<b>bool</b>) the buddy block status: <c>true</c> if the buddy is blocked; <c>false</c> if the buddy is not blocked; when a buddy is blocked, SmartFoxServer does not deliver private messages from/to that user.</description>
            </item><item>
            <term>variables</term>
            <description>(<b>object</b>) an object with extra properties of the buddy (Buddy Variables); see also <see cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)"/></description>
            </item>
            </list>
            
            The following example shows how to retrieve the properties of each buddy in the buddy list.
            <code>
            foreach (Buddy buddy in smartFox.buddyList)
            {
            	// Trace buddy properties
            	Trace.WriteLine("Buddy id: " + buddy.GetId());
            	Trace.WriteLine("Buddy name: " + buddy.GetName());
            	Trace.WriteLine("Is buddy online? " + buddy.IsOnline());
            	Trace.WriteLine("Is buddy blocked? " + buddy.IsBlocked());
            				
            	// Trace all Buddy Variables
            	foreach (string v in buddy.GetVariables().Keys)
            		Trace.WriteLine("\t" + v + " -- " + buddy.GetVariable(v));
             }
            	</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.myBuddyVars"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.LoadBuddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyById(System.Int32)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyByName(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.RemoveBuddy(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyBlockStatus(System.String,System.Boolean)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            this property and all the buddy-related method are available only if the buddy list feature is enabled for the current zone. Check the SmartFoxServer server-side configuration.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic (except block status) / Pro</para>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.6.0 - Buddy's <i>isBlocked</i> property added.</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.myBuddyVars">
            <summary>
            The current user's Buddy Variables.<br/>
            This is an associative array containing the current user's properties when he/she is present in the buddy lists of other users.<br/>
            See the <see cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)"/> method for more details.
            </summary>
            
            <example>The following example shows how to read the current user's own Buddy Variables.
            			<code>
            			foreach (string v in smartFox.myBuddyVars.Keys)
            				Trace.WriteLine("Variable " + v + " -- " + smartFox.myBuddyVars[v]);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyById(System.Int32)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyByName(System.String)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic (except block status) / Pro</para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.debug">
            <summary>
            Toggle the client-side debugging informations.<br/>
            When turned on, the developer is able to inspect all server messages that are sent and received by the client in the Flash authoring environment.<br/>
            This allows a better debugging of the interaction with the server during application developement.
            </summary>
            
            <example>The following example shows how to turn on SmartFoxServer API debugging.
            			<code>
            			SmartFoxClient smartFox = new SmartFoxClient();
            			bool runningLocally = true;
            			
            			string ip;
            			int port;
            			
            			if (runningLocally)
            			{
            				smartFox.debug = true;
            				ip = "127.0.0.1";
            				port = 9339;
            			}
            			else
            			{
            				smartFox.debug = false;
            				ip = "100.101.102.103";
            				port = 9333;
            			}
            			
            			smartFox.Connect(ip, port);
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnDebugMessageDelegate"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.myUserId">
            <summary>
            The current user's SmartFoxServer id.<br/>
            The id is assigned to a user on the server-side as soon as the client connects to SmartFoxServer successfully.
            </summary>
            
            <example>The following example shows how to retrieve the user's own SmartFoxServer id.
            			<code>
            			Trace.WriteLine("My user ID is: " + smartFox.myUserId);
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.myUserName"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            client-side, the <b>myUserId</b> property is available only after a successful login is performed using the default login procedure.<br/>
            If a custom login process is implemented, this property must be manually set after the successful login! If not, various client-side modules (SmartFoxBits, RedBox, etc.) may not work properly.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.myUserName">
            <summary>
            The current user's SmartFoxServer username.
            </summary>
            
            <example>The following example shows how to retrieve the user's own SmartFoxServer username.
            			<code>
            			Trace.WriteLine("I logged in as: " + smartFox.myUserName);
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.myUserId"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Login(System.String,System.String,System.String)"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            client-side, the <b>myUserName</b> property is available only after a successful login is performed using the default login procedure.
            If a custom login process is implemented, this property must be manually set after the successful login! If not, various client-side modules (SmartFoxBits, RedBox, etc.) may not work properly.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.playerId">
            <summary>
            The current user's id as a player in a game room.<br/>
            The <b>playerId</b> is available only after the user successfully joined a game room. This id is 1-based (player 1, player 2, etc.), but if the user is a spectator or the room is not a game room, its value is -1.<br/>
            When a user joins a game room, a player id (or "slot") is assigned to him/her, based on the slots available in the room at the moment in which the user entered it; for example:<br/>
            <ul>
            	<li>in a game room for 2 players, the first user who joins it becomes player one (playerId = 1) and the second user becomes player two (player = 2);</li>
            	<li>in a game room for 4 players where only player three is missing, the next user who will join the room will be player three (playerId = 3);</li>
            </ul>
            </summary>
            
            <example>The following example shows how to retrieve the user's own player id.
            			<code>
            			Trace.WriteLine("I'm player " + smartFox.playerId);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetMyPlayerIndex"/>
            <seealso cref="M:SmartFoxClientAPI.Data.Room.IsGame"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            if multi-room join is allowed, this property contains only the last player id assigned to the user, and so it's useless.
            In this case the <see cref="M:SmartFoxClientAPI.Data.Room.GetMyPlayerIndex"/> method should be used to retrieve the player id for each joined room.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.amIModerator">
            <summary>
            A boolean flag indicating if the user is recognized as Moderator.
            </summary>
            
            <example>The following example shows how to check if the current user is a Moderator in the current SmartFoxServer zone.
            			<code>
            			if (smartfox.amIModerator)
            				Trace.WriteLine("I'm a Moderator in this zone");
            			else
            				Trace.WriteLine("I'm a standard user");
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId">
            <summary>
            The property stores the id of the last room joined by the current user.<br/>
            In most multiuser applications users can join one room at a time: in this case this property represents the id of the current room.<br/>
            If multi-room join is allowed, the application should track the various id(s) in an array (for example) and this property should be ignored.
            </summary>
            
            <example>The following example shows how to retrieve the current room object (as an alternative to the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetActiveRoom"/> method).
            			<code>
            			Room room = smartFox.GetRoom(smartFox.activeRoomId);
            			Trace.WriteLine("Current room is: " + room.GetName());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetActiveRoom"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.changingRoom">
            <summary>
            A boolean flag indicating if the process of joining a new room is in progress.
            </summary>
            
            @exclude
        </member>
        <member name="F:SmartFoxClientAPI.SmartFoxClient.httpPort">
            <summary>
            The TCP port used by the embedded webserver.<br/>
            The default port is <b>8080</b>; if the webserver is listening on a different port number, this property should be set to that value.
            </summary>
            
            <example>The following example shows how to retrieve the webserver's current http port.
            			<code>
            			Trace.WriteLine("HTTP port is: " + smartfox.httpPort);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.5.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetRawProtocolSeparator">
            <summary>
            Get/set the character used as separator for the string (raw) protocol.<br/>
            The default value is <b>%</b> (percentage character).
            </summary>
            
            <example>The following example shows how to set the raw protocol separator.
            			<code>
            			smartFox.GetRawProtocolSeparator() = "|";
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.5.5</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetRawProtocolSeparator(System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.GetRawProtocolSeparator"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.IsConnected">
            <summary>
            A boolean flag indicating if the current user is connected to the server.
            </summary>
            
            <example>The following example shows how to check the connection status.
            			<code>
            			Trace.WriteLine("My connection status: " + (smartFox.IsConnected() ? "connected" : "not connected"));
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetIsConnected(System.Boolean)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SetIsConnected(System.Boolean)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetHttpPollSpeed">
            <summary>
            The minimum interval between two polling requests when connecting to SmartFoxServer via BlueBox module.<br/>
            The default value is 750 milliseconds. Accepted values are between 0 and 10000 milliseconds (10 seconds).
            </summary>
            
            <example>The following example shows how to set the polling speed.
            			<code>
            			    Trace.WriteLine("Poll speed: " + smartFox.GetHttpPollSpeed());
            			    smartFox.SetHttpPollSpeed(200);
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.smartConnect"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Usage Note:</b><br/>
            <i>Which is the optimal value for polling speed?</i><br/>
            				A value between 750-1000 ms is very good for chats, turn-based games and similar kind of applications. It adds minimum lag to the client responsiveness and it keeps the server CPU usage low.<br/>
            				Lower values (200-500 ms) can be used where a faster responsiveness is necessary. For super fast real-time games values between 50 ms and 100 ms can be tried.<br/>
            				With settings &lt; 200 ms the CPU usage will grow significantly as the http connection and packet wrapping/unwrapping is more expensive than using a persistent connection.
            				Using values below 50 ms is not recommended.</para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetHttpPollSpeed(System.Int32)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.GetHttpPollSpeed"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.#ctor">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.#ctor(System.Boolean)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.#ctor(System.Boolean)">
            <summary>The SmartFoxClient contructor.</summary>
            
            <param name="debug">turn on the debug messages (optional).</param>
            
            <example>The following example shows how to instantiate the SmartFoxClient class enabling the debug messages.
            <code>
            SmartFoxServer smartFox = new SmartFoxServer(true);
            </code>
            </example>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Finalize">
            Destructor
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Dispose">
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Dispose(System.Boolean)">
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetConnectionMode">
             <summary>
             Get the current connection mode.
             </summary>
             
             <returns>The current connection mode, expressed by one of the following constants: <see cref="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_DISCONNECTED"/> (disconnected), <see cref="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_SOCKET"/> (socket mode), <see cref="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_HTTP"/> (http mode).</returns>
             
             <example>The following example shows how to check the current connection mode.
             			<code>
             			SFSEvent.onConnection += OnConnection;
            						
            			smartFox.Connect("127.0.0.1", 9339);
            					
            			public void OnConnection(bool success, string error)
            			{
            				Trace.WriteLine("Connection mode: " + smartFox.GetConnectionMode());
            			}
             			</code>
             </example>
             
             <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_DISCONNECTED"/>
             <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_SOCKET"/>
             <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.CONNECTION_MODE_HTTP"/>
             <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/>
             
             <remarks>
             <para><b>Since:</b><br/>
             SmartFoxServer Pro v1.6.0</para>
             <para><b>Version:</b><br/>
             SmartFoxServer Pro</para>
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)">
            <summary>
            Establish a connection to SmartFoxServer.<br/>
            The client usually gets connected to SmartFoxServer through a socket connection. In SmartFoxServer Pro, if a socket connection is not available and the <see cref="F:SmartFoxClientAPI.SmartFoxClient.smartConnect"/> property is set to <c>true</c>, an http connection to the BlueBox module is attempted.<br/>
            When a successful connection is established, the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetConnectionMode"/> can be used to check the current connection mode.<br/>
            </summary>
            
            <param name="hostAdr">the SmartFoxServer host or ip address.</param>
            <param name="port">the SmartFoxServer TCP port (optional)</param>
            
            <example>The following example shows how to connect to SmartFoxServer.
            			<code>
            			smartFox.Connect("127.0.0.1", 9339);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Disconnect"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetConnectionMode"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.smartConnect"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionDelegate"/></para>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.6.0 - BlueBox connection attempt in case of socket connection not available.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic (except BlueBox connection) / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Disconnect">
            <summary>
            Close the current connection to SmartFoxServer.
            </summary>
            
            <example>The following example shows how to disconnect from SmartFoxServer.
            			<code>
            			smartFox.Disconnect();
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionLostDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnConnectionLostDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.AutoJoin">
            <summary>
            Automatically join the the default room (if existing) for the current zone.<br/>
            A default room can be specified in the SmartFoxServer server-side configuration by adding the <c>autoJoin = "true"</c> attribute to one of the <c>&lt;Room&gt;&gt;</c> tags in a zone.<br/>
            When a room is marked as <i>autoJoin</i> it becomes the default room where all clients are joined when this method is called.
            </summary>
            
            <example>The following example shows how to join the default room in the current zone.
            			<code>
            			smartFox.AutoJoin();
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Login(System.String,System.String,System.String)">
            <summary>
            Perform the default login procedure.<br/>
            The standard SmartFoxServer login procedure accepts guest users. If a user logs in with an empty username, the server automatically creates a name for the client using the format <i>guest_n</i>, where <i>n</i> is a progressive number.<br/>
            Also, the provided username and password are checked against the moderators list (see the SmartFoxServer server-side configuration) and if a user matches it, he is set as a Moderator.
            </summary>
            
            <param name="zone">the name of the zone to log into.</param>
            <param name="name">the user name.</param>
            <param name="pass">the user password.</param>
            
            <example>The following example shows how to login into a zone.
            			<code>
            			SFSEvent.onLogin += OnLogin;
            			
            			smartFox.Login("simpleChat", "jack");
            			
            			public void OnLogin(bool success, string name, string error)
            			{
            				if (success)
            					Trace.WriteLine("Successfully logged in as " + name);
            				else
            					Trace.WriteLine("Zone login error; the following error occurred: " + error);
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Logout"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnLoginDelegate"/>
            
            <remarks>
            <para><b>NOTE 1:</b><br/>
            duplicate names in the same zone are not allowed.</para>
            <para><b>NOTE 2:</b><br/>
            for SmartFoxServer Basic, where a server-side custom login procedure can't be implemented due to the lack of <i>extensions</i> support, a custom client-side procedure can be used, for example to check usernames against a database using a php/asp page.<br/>
            In this case, this should be done BEFORE calling the <b>login</b> method. This way, once the client is validated, the stadard login procedure can be used.</para>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnLoginDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.Logout">
            <summary>
            Log the user out of the current zone.<br/>
            After a successful logout the user is still connected to the server, but he/she has to login again into a zone, in order to be able to interact with the server.
            </summary>
            
            <example>The following example shows how to logout from a zone.
            			<code>
            			SFSEvent.onLogout += OnLogout;
            			
            			smartFox.Logout();
            			
            			public void OnLogout()
            			{
            				Trace.WriteLine("Logged out successfully");
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Login(System.String,System.String,System.String)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnLogoutDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnLogoutDelegate"/></para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.5.5</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.LoadConfig(System.String,System.Boolean)">
            <summary>
            Load a client configuration file.<br/>
            The SmartFoxClient instance can be configured through an external xml configuration file loaded at run-time.<br/>
            By default, the <b>LoadConfig</b> method loads a file named "config.xml", placed in the same folder of the application file.<br/>
            If the <i>autoConnect</i> parameter is set to <c>true</c>, on loading completion the <see cref="M:SmartFoxClientAPI.SmartFoxClient.Connect(System.String,System.Int32)"/> method is automatically called by the API, otherwise the <see cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadSuccessDelegate"/> event is dispatched.<br/>
            In case of loading error, the <see cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadFailureDelegate"/> event id fired.<br/>
            </summary>
            
            <param name="configFile">external xml configuration file name (optional).</param>
            <param name="autoConnect">a boolean flag indicating if the connection to SmartFoxServer must be attempted upon configuration loading completion (optional).</param>
            
            <example>The following example shows how to load an external configuration file.
            			<code>
            		    SFSEvent.onConfigLoadSuccess += OnConfigLoadSuccess;
            			SFSEvent.onConfigLoadFailure += OnConfigLoadFailure;
            			
            			smartFox.LoadConfig("testEnvironmentConfig.xml", false);
            			
            			public void OnConfigLoadSuccess()
            			{
            				Trace.WriteLine("Config file loaded, now connecting...");
            				smartFox.Connect(smartFox.ipAddress, smartFox.port);
            			}
            			
            			public void OnConfigLoadFailure(string message)
            			{
            				Trace.WriteLine("Failed loading config file: " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.ipAddress"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.port"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.defaultZone"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.debug"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.blueBoxIpAddress"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.blueBoxPort"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.httpPort"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetHttpPollSpeed"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRawProtocolSeparator"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadSuccessDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadFailureDelegate"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.smartConnect"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadSuccessDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnConfigLoadFailureDelegate"/>
            </para>
            <para><b>NOTE:</b><br/>
            the SmartFoxClient configuration file (client-side) should not be confused with the SmartFoxServer configuration file (server-side).</para>
            <para><b>Usage Note:</b><br/>
            The external xml configuration file has the following structure; ip, port and zone parameters are mandatory, all other parameters are optional.
            				<code>
            				<SmartFoxClient>
            					<ip>127.0.0.1</ip>
            					<port>9339</port>
            					<zone>simpleChat</zone>
            					<debug>true</debug>
            					<blueBoxIpAddress>127.0.0.1</blueBoxIpAddress>
            					<blueBoxPort>9339</blueBoxPort>
            					<smartConnect>true</smartConnect>
            					<httpPort>8080</httpPort>
            					<httpPollSpeed>750</httpPollSpeed>
            					<rawProtocolSeparator>%</rawProtocolSeparator>
            				</SmartFoxClient>
            				</code>
            				</para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.ProcessEventQueue">
             <summary>
             Called in queue mode to process the events that have been queued up for dispatching
             </summary>
             
             <param/>
             
             <example>The following example shows how to set the game in queued mode and how to process the queue.
             			<code>
             			smartFox = new SmartFoxClient();
            			smartFox.runInQueueMode = true;
              			
            			void FixedUpdate() {
            				smartFox.ProcessEventQueue();
            			}
             			</code>
             </example>
             
             <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.runInQueueMode"/>
             
             <remarks>
             <para>
             The queue mode is preferred in non-thread safe environments like the Unity game engine, or where you want precise control of when callbacks happen.
             </para>
             
             <para><b>Version:</b><br/>
             SmartFoxServer Basic / Pro</para>
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.ProcessSingleEventInEventQueue">
             <summary>
             Called in queue mode to process the events that have been queued up for dispatching
             </summary>
             
             <param/>
             
             <example>The following example shows how to set the game in queued mode and how to process the queue.
             			<code>
             			smartFox = new SmartFoxClient();
            			smartFox.runInQueueMode = true;
              			
            			void FixedUpdate() {
            				smartFox.ProcessEventQueue();
            			}
             			</code>
             </example>
             
             <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.runInQueueMode"/>
             
             <remarks>
             <para>
             The queue mode is preferred in non-thread safe environments like the Unity game engine, or where you want precise control of when callbacks happen.
             </para>
             
             <para><b>Version:</b><br/>
             SmartFoxServer Basic / Pro</para>
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.NumEventsInEventQueue">
             <summary>
             Returns the number of events waiting to be processed while running in queue mode
             </summary>
             
             <param/>
             
             <example>The following example shows how to query the number of events.
             			<code>
            				Console.WriteLine("Waiting events in queue: " + smartFox.NumEventsInEventQueue();
             			</code>
             </example>
             
             <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.runInQueueMode"/>
             <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.ProcessEventQueue"/>
             
             <remarks>
             <para>
             Queue is always empty and thus returning 0 as count when not running in queue mode
             </para>
             
             <para><b>Version:</b><br/>
             SmartFoxServer Basic / Pro</para>
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.AddBuddy(System.String)">
            <summary>
            Add a user to the buddy list.<br/>
            Since SmartFoxServer Pro 1.6.0, the buddy list feature can be configured to use a <i>basic</i> or <i>advanced</i> security mode (see the SmartFoxServer server-side configuration file).<br/>
            Check the following usage notes for details on the behavior of the <b>AddBuddy</b> method in the two cases.
            </summary>
            
            <param name="buddyName">the name of the user to be added to the buddy list.</param>
            
            <example>The following example shows how to add a user to the buddy list.
            			<code>
            			smartFox.AddBuddy("jack");
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.RemoveBuddy(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyBlockStatus(System.String,System.Boolean)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate"/></para>
            <para><b>Usage Note:</b><br/>
            <i>Basic security mode</i>
            				When a buddy is added, if the buddy list is already full, the <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/> event is fired; otherwise the buddy list is updated and the <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/> event is fired.
            				<hr/>
            				<i>Advanced security mode</i>
            				If the <c>&lt;addBuddyPermission&gt;</c> parameter is set to <c>true</c> in the buddy list configuration section of a zone, before the user is actually added to the buddy list he/she must grant his/her permission.
            				The permission request is sent if the user is online only; the user receives the {@link SFSEvent#onBuddyPermissionRequest} event. When the permission is granted, the buddy list is updated and the <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/> event is fired.
            				If the permission is not granted (or the buddy didn't receive the permission request), the <b>addBuddy</b> method can be called again after a certain amount of time only. This time is set in the server configuration <c>&lt;permissionTimeOut&gt;</c> parameter.
            				Also, if the <c>&lt;mutualAddBuddy&gt;</c> parameter is set to <c>true</c>, when user A adds user B to the buddy list, he/she is automatically added to user B's buddy list.
            				Lastly, if the buddy list is full, the <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/> event is fired.
            </para>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.6.0 - Buddy list's <i>advanced security mode</i> implemented.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic (except <i>advanced mode</i>) / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.ClearBuddyList">
            <summary>
            Remove all users from the buddy list.<br/>
            <b>Deprecated</b> In order to avoid conflits with the buddy list <i>advanced security mode</i> implemented since SmartFoxServer Pro 1.6.0, buddies should be removed one by one, by iterating through the buddy list.
            </summary>
            
            <example>The following example shows how to clear the buddy list.
            			<code>
            			smartFox.ClearBuddyList();
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/></para>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.6.0 - Method deprecated.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyByName(System.String)">
            <summary>
            Get a buddy from the buddy list, using the buddy's username as key.<br/>
            Refer to the <see cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/> property for a description of the buddy object's properties.
            </summary>
            
            <param name="buddyName">the username of the buddy.</param>
            
            <returns>The buddy object.</returns>
            
            <example>The following example shows how to retrieve a buddy from the buddy list.
            			<code>
            			Buddy buddy = smartFox.GetBuddyByName("jack");
            			
            			Trace.WriteLine("Buddy id: " + buddy.GetId());
            			Trace.WriteLine("Buddy name: " + buddy.GetName());
            			Trace.WriteLine("Is buddy online? " + buddy.IsOnline());
            			Trace.WriteLine("Is buddy blocked? " + buddy.IsBlocked());
            			
            			Trace.WriteLine("Buddy Variables:");
            			foreach (string v in buddy.GetVariables().Keys)
            				Trace.WriteLine("\t" + v + " -- " + buddy.GetVariable(v));
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyById(System.Int32)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyById(System.Int32)">
            <summary>
            Get a buddy from the buddy list, using the user id as key.<br/>
            Refer to the <see cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/> property for a description of the buddy object's properties.
            </summary>
            
            <param name="id">the user id of the buddy.</param>
            
            <returns>The buddy object.</returns>
            
            <example>The following example shows how to retrieve a buddy from the buddy list.
            			<code>
            			Buddy buddy = smartFox.GetBuddyById(25);
            			
            			Trace.WriteLine("Buddy id: " + buddy.GetId());
            			Trace.WriteLine("Buddy name: " + buddy.GetName());
            			Trace.WriteLine("Is buddy online? " + buddy.IsOnline());
            			Trace.WriteLine("Is buddy blocked? " + buddy.IsBlocked());
            			
            			Trace.WriteLine("Buddy Variables:");
            			foreach (string v in buddy.GetVariables().Keys)
            				Trace.WriteLine("\t" + v + " -- " + buddy.GetVariable(v));
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyByName(System.String)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyRoom(SmartFoxClientAPI.Data.Buddy)">
            <summary>
            Request the room id(s) of the room(s) where a buddy is currently located into.
            </summary>
            
            <param name="buddy">a buddy object taken from the <see cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/> hashtable.</param>
            
            <example>The following example shows how to join the same room of a buddy.
            			<code>
            			SFSEvent.onBuddyRoom += OnBuddyRoom;
            			
            			Buddy buddy = smartFox.GetBuddyByName("jack");
            			smartFox.GetBuddyRoom(buddy);
            			
            			public void OnBuddyRoom(ArrayList idList)
            			{
            				// Reach the buddy in his room
            				smartFox.Join(idList[0]);
            			}
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyRoomDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyRoomDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.LoadBuddyList">
            <summary>
            Load the buddy list for the current user.
            </summary>
            
            <example>The following example shows how to load the current user's buddy list.
            			<code>
            			SFSEvent.onBuddyList += OnBuddyList;
            			
            			smartFox.LoadBuddyList();		
            
            			public void OnBuddyList(ArrayList buddyList)
            			{
            				foreach (Buddy buddy in buddyList)
            				{
            					Trace.WriteLine("Buddy id: " + buddy.GetId());
            					Trace.WriteLine("Buddy name: " + buddy.GetName());
            					Trace.WriteLine("Is buddy online? " + buddy.IsOnline());
            					Trace.WriteLine("Is buddy blocked? " + buddy.IsBlocked());
            					
            					Trace.WriteLine("Buddy Variables:")
            					for (string v in buddy.GetVariables().Keys)
            						Trace.WriteLine("\t" + v + " -- " + buddy.GetVariable(v));
            				}
            			}
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListErrorDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.RemoveBuddy(System.String)">
            <summary>
            Remove a buddy from the buddy list.<br/>
            Since SmartFoxServer Pro 1.6.0, the buddy list feature can be configured to use a <i>basic</i> or <i>advanced</i> security mode (see the SmartFoxServer server-side configuration file).<br/>
            Check the following usage notes for details on the behavior of the <b>removeBuddy</b> method in the two cases.
            </summary>
            
            <param name="buddyName">the name of the user to be removed from the buddy list.</param>
            
            <example>The following example shows how to remove a user from the buddy list.
            			<code>
            			string buddyName = "jack";
            			smartFox.RemoveBuddy(buddyName);
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.AddBuddy(System.String)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/>
            
            <remarks>
            <para><b>Usage Note:</b><br/>
            <i>Basic security mode</i><br/>
            				When a buddy is removed, the buddy list is updated and the {@link SFSEvent#onBuddyList} event is fired.<br/>
            				<hr/><br/>
            				<i>Advanced security mode</i><br/>
            				In addition to the basic behavior, if the <c>&lt;mutualRemoveBuddy&gt;</c> server-side configuration parameter is set to {@code true}, when user A removes user B from the buddy list, he/she is automatically removed from user B's buddy list.</para>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListDelegate"/></para>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.6.0 - Buddy list's <i>advanced security mode</i> implemented.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic (except <i>advanced mode</i>) / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendBuddyPermissionResponse(System.Boolean,System.String)">
            <summary>
            Grant current user permission to be added to a buddy list.<br/>
            If the SmartFoxServer Pro 1.6.0 <i>advanced</i> security mode is used (see the SmartFoxServer server-side configuration), when a user wants to add a buddy to his/her buddy list, a permission request is sent to the buddy.<br/>
            Once the <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate"/> event is received, this method must be used by the buddy to grant or refuse permission. When the permission is granted, the requester's buddy list is updated.
            </summary>
            
            <param name="allowBuddy"><c>true</c> to grant permission, <c>false</c> to refuse to be added to the requester's buddy list.</param>
            <param name="targetBuddy">the username of the requester.</param>
            
            <example>The following example shows how to grant permission to be added to a buddy list once request is received.
            			<code>
            			SFSEvent.onBuddyPermissionRequest += OnBuddyPermissionRequest;
            			
            			bool autoGrantPermission = true;
            			
            			public void OnBuddyPermissionRequest(string sender, string message)
            			{
            				if (autoGrantPermission)
            				{
            					// Automatically grant permission
            					
            					smartFox.SendBuddyPermissionResponse(true, sender);
            				}
            				else
            				{
            					// Display a popup containing grant/refuse buttons
            					// TODO - make popup
            				}
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.AddBuddy(System.String)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyPermissionRequestDelegate"/></para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyBlockStatus(System.String,System.Boolean)">
            <summary>
            Block or unblock a user in the buddy list.<br/>
            When a buddy is blocked, SmartFoxServer does not deliver private messages from/to that user.
            </summary>
            
            <param name="buddyName">the name of the buddy to be blocked or unblocked.</param>
            <param name="status"><c>true</c> to block the buddy, <c>false</c> to unblock the buddy.</param>
            
            <example>The following example shows how to block a user from the buddy list.
            			<code>
            			smartFox.SetBuddyBlockStatus("jack", true);
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.6.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)">
            <summary>
            Set the current user's Buddy Variables.<br/>
            This method allows to set a number of properties of the current user as buddy of other users; in other words these variables will be received by the other users who have the current user as a buddy.<br/>
            <br/>
            Buddy Variables are the best way to share user's informations with all the other users having him/her in their buddy list.: for example the nickname, the current audio track the user is listening to, etc. The most typical usage is to set a variable containing the current user status, like "available", "occupied", "away", "invisible", etc.).
            </summary>
            
            <param name="varList">a Hashtable, where the key is the name of the variable and the value is the variable's value. Buddy Variables should all be strings. If you need to use other data types you should apply the appropriate type casts.</param>
            
            <example>The following example shows how to set three variables containing the user's status, the current audio track the user listening to and the user's rank. The last one is an offline variable.
            			<code>
            			Hashtable bVars = new Hashtable();
            			bVars.Add("status", "away");
            			bVars.Add("track", "One Of These Days");
            			bVars.Add("$rank", "guru");
            			
            			smartFox.SetBuddyVariables(bVars);
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.myBuddyVars"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            before the release of SmartFoxServer Pro v1.6.0, Buddy Variables could not be stored, and existed during the user session only. SmartFoxServer Pro v1.6.0 introduced the ability to persist (store) all Buddy Variables and the possibility to save "offline Buddy Variables" (see the following usage notes).</para>
            <para><b>Usage Note:</b><br/>
            Let's assume that three users (A, B and C) use an "istant messenger"-like application, and user A is part of the buddy lists of users B and C.<br/>
            				If user A sets his own variables (using the <see cref="M:SmartFoxClientAPI.SmartFoxClient.SetBuddyVariables(System.Collections.Hashtable)"/> method), the <see cref="F:SmartFoxClientAPI.SmartFoxClient.myBuddyVars"/> array on his client gets populated and a <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/> event is dispatched to users B and C.<br/>
            				User B and C can then read those variables in their own buddy lists by means of the <b>variables</b> property on the buddy object (which can be retrieved from the <see cref="F:SmartFoxClientAPI.SmartFoxClient.buddyList"/> array by means of the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyById(System.Int32)"/> or <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetBuddyByName(System.String)"/> methods).<br/>
            				<hr/>
            				If the buddy list's <i>advanced security mode</i> is used (see the SmartFoxServer server-side configuration), Buddy Variables persistence is enabled: in this way regular variables are saved when a user goes offline and they are restored (and dispatched to the other users) when their owner comes back online.<br/>
            				Also, setting the <c>&lt;offLineBuddyVariables&gt;</c> parameter to <c>true</c>, offline variables can be used: this kind of Buddy Variables is loaded regardless the buddy is online or not, providing further informations for each entry in the buddy list. A typical usage for offline variables is to define a buddy image or additional informations such as country, email, rank, etc.<br/>
            				To creare an offline Buddy Variable, the "$" character must be placed before the variable name.</para>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnBuddyListUpdateDelegate"/></para>
            <para><b>History:</b><br/>
            SmartFoxServer Pro v1.6.0 - Buddy list's <i>advanced security mode</i> implemented (persistent and offline Buddy Variables).</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic (except <i>advanced mode</i>) / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(SmartFoxClientAPI.Data.NewRoomDescriptor)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(SmartFoxClientAPI.Data.NewRoomDescriptor,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(SmartFoxClientAPI.Data.NewRoomDescriptor,System.Int32)">
            <summary>
            Dynamically create a new room in the current zone.
            </summary>
            
            <param name="roomObj">a NewRoomDescriptor object with the properties described farther on.</param>
            <param name="roomId">the id of the room from where the request is originated, in case the application allows multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>
            The following example shows how to create a new room.
            			<code>
            			Hashtable roomObj = new Hashtable();
            			roomObj.Add("name", "The Cave");
            			roomObj.Add("isGame", true);
            			roomObj.Add("maxUsers", 15);
            			
            			ArrayList variables = new ArrayList();
            			variables.Add( new RoomVariable("ogres", 5, true, false) );
            			variables.Add( new RoomVariable("skeletons", 4) );
            			
            			roomObj.Add("vars", variables);
            			
            			smartFox.CreateRoom(roomObj);
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnCreateRoomErrorDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnCreateRoomErrorDelegate"/></para>
            <para><b>NOTE:</b><br/>
            if the newly created room is a game room, the user is joined automatically upon successful room creation.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable,System.Int32)">
            <summary>
            Dynamically create a new room in the current zone.
            </summary>
            
            <param name="roomObj">a Hashtable with the properties described farther on.</param>
            <param name="roomId">the id of the room from where the request is originated, in case the application allows multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>
            The <i>roomObj</i> parameter is an object containing the following properties:
            <list type="table">
            <listheader>
            <term>term</term>
            <description>description</description>
            </listheader>
            <item>
            <term>name</term>
            <description>(<b>string</b>) the room name.</description>
            </item><item>
            <term>password</term>
            <description>(<b>string</b>) a password to make the room private (optional, default: none).</description>
            </item><item>
            <term>maxUsers</term>
            <description>(<b>int</b>) the maximum number of users that can join the room.</description>
            </item><item>
            <term>maxSpectators</term>
            <description>(<b>int</b>) in game rooms only, the maximum number of spectators that can join the room (optional, default value: 0).</description>
            </item><item>
            <term>isGame</term>
            <description>if <c>true</c>, the room is a game room (optional, default value: <c>false</c>).</description>
            </item><item>
            <term>exitCurrentRoom</term>
            <description>(<b>bool</b>) if <c>true</c> and in case of game room, the new room is joined after creation (optional, default value: <c>true</c>).</description>
            </item><item>
            <term>uCount</term>
            <description>(<b>bool</b>) if <c>true</c>, the new room will receive the <see cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/> notifications (optional, default <u>recommended</u> value: <c>false</c>).</description>
            </item><item>
            <term>vars</term>
            <description>(<b>Hashtable</b>) an hashtable of Room Variables, as described in the <see cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/> method documentation (optional, default: none).</description>
            </item><item>
            <term>extension</term>
            <description>(<b>Hashtable</b>) which extension should be dynamically attached to the room, as described farther on (optional, default: none).</description>
            </item>
            </list>
            
            <para>
            A Room-level extension can be attached to any room during creation; the <i>extension</i> property in the <i>roomObj</i> parameter is an object with the following properties:
            <list type="table">
            <listheader>
            <term>term</term>
            <description>description</description>
            </listheader>
            <item>
            <term>name</term>
            <description>(<b>string</b>) the name used to reference the extension (see the SmartFoxServer server-side configuration).</description>
            </item><item>
            <term>script</term>
            <description>(<b>string</b>) the file name of the extension script (for Actionscript and Python); if Java is used, the fully qualified name of the extension must be provided. The file name is relative to the root of the extension folder ("sfsExtensions/" for Actionscript and Python, "javaExtensions/" for Java).</description>
            </item>
            </list>
            </para>
            
            The following example shows how to create a new room.
            			<code>
            			Hashtable roomObj = new Hashtable();
            			roomObj.Add("name", "The Cave");
            			roomObj.Add("isGame", true);
            			roomObj.Add("maxUsers", 15);
            			
            			ArrayList variables = new ArrayList();
            			variables.Add( new RoomVariable("ogres", 5, true, false) );
            			variables.Add( new RoomVariable("skeletons", 4) );
            			
            			roomObj.Add("vars", variables);
            			
            			smartFox.CreateRoom(roomObj);
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnCreateRoomErrorDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/>
            
            <remarks>
            <para><b>*DEPRECATED*</b><br/>
            Use object based CreateRoom instead of hashtable based</para>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomAddedDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnCreateRoomErrorDelegate"/></para>
            <para><b>NOTE:</b><br/>
            if the newly created room is a game room, the user is joined automatically upon successful room creation.</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetAllRooms">
            <summary>
            Get the list of rooms in the current zone.<br/>
            Unlike the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList"/> method, this method returns the list of <see cref="T:SmartFoxClientAPI.Data.Room"/> objects already stored on the client, so no request is sent to the server.
            </summary>
            
            <returns>The list of rooms available in the current zone.</returns>
            
            <example>The following example shows how to retrieve the room list.
            			<code>
            			Hashtable rooms = smartFox.GetAllRooms();
            			
            			foreach (Room room in rooms.Values)
            			{
            				Trace.WriteLine("Room: " + room.getName());
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetRoom(System.Int32)">
            <summary>
            Get a <see cref="T:SmartFoxClientAPI.Data.Room"/> object, using its id as key.
            </summary>
            
            <param name="roomId">the id of the room.</param>
            
            <returns>The <see cref="T:SmartFoxClientAPI.Data.Room"/> object.</returns>
            
            <example>The following example shows how to retrieve a room from its id.
            			<code>
            			Room roomObj = smartFox.GetRoom(15);
            			Trace.WriteLine("Room name: " + roomObj.GetName() + ", max users: " + roomObj.GetMaxUsers());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomByName(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetAllRooms"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetRoomByName(System.String)">
            <summary>
            Get a <see cref="T:SmartFoxClientAPI.Data.Room"/> object, using its name as key.
            </summary>
            
            <param name="roomName">the name of the room.</param>
            
            <returns>The <see cref="T:SmartFoxClientAPI.Data.Room"/> object.</returns>
            
            <example>The following example shows how to retrieve a room from its name.
            			<code>
            			Room roomObj = smartFox.GetRoomByName("The Entrance");
            			Trace.WriteLine("Room name: " + roomObj.GetName() + ", max users: " + roomObj.GetMaxUsers());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoom(System.Int32)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetAllRooms"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList"/>
            <seealso cref="T:SmartFoxClientAPI.Data.Room"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetRoomList">
            <summary>
            Retrieve the updated list of rooms in the current zone.<br/>
            Unlike the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetAllRooms"/> method, this method sends a request to the server, which then sends back the complete list of rooms with all their properties and server-side variables (Room Variables).<br/>
            
            If the default login mechanism provided by SmartFoxServer is used, then the updated list of rooms is received right after a successful login, without the need to call this method.<br/>
            Instead, if a custom login handler is implemented, the room list must be manually requested to the server using this method.<br/>
            </summary>
            
            <example>The following example shows how to retrieve the room list from the server.
            			<code>
            			SFSEvent.onRoomListUpdate += OnRoomListUpdate;
            			
            			smartFox.GetRoomList()
            			
            			public void OnRoomListUpdate(Hashtable roomList)
            			{
            				// Dump the names of the available rooms in the current zone
            				foreach (Room room in roomList.Values)
            					Trace.WriteLine(room.GetName())
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoom(System.Int32)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRoomByName(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetAllRooms"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomListUpdateDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomListUpdateDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetActiveRoom">
            <summary>
            Get the currently active {@link Room} object.<br/>
            SmartFoxServer allows users to join two or more rooms at the same time (multi-room join). If this feature is used, then this method is useless and the application should track the various room id(s) manually, for example by keeping them in an array.
            </summary>
            
            <returns>the <see cref="T:SmartFoxClientAPI.Data.Room"/> object of the currently active room; if the user joined more than one room, the last joined room is returned.</returns>
            
            <example>The following example shows how to retrieve the current room object.
            			<code>
            			Room room = smartFox.GetActiveRoom();
            			Trace.WriteLine("Current room is: " + room.GetName());
            			</code>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Join a room.
            </summary>
            
            <param name="newRoom">the name (<c>string</c>) or the id (<c>int</c>) of the room to join.</param>
            <param name="pword">the room's password, if it's a private room (optional).</param>
            <param name="isSpectator">a boolean flag indicating wheter you join as a spectator or not (optional).</param>
            <param name="dontLeave">a boolean flag indicating if the current room must be left after successfully joining the new room (optional).</param>
            <param name="oldRoom">the id of the room to leave (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>In the following example the user requests to join a room with id = 10; by default SmartFoxServer will disconnect him from the previous room.
            			<code>
            			smartFox.JoinRoom(10);
            			</code>
            			<hr/>
            			
            			In the following example the user requests to join a room with id = 12 and password = "mypassword"; by default SmartFoxServer will disconnect him from the previous room.
            			<code>
            			smartFox.JoinRoom(12, "mypassword");
            			</code>
            			<hr/>
            			
            			In the following example the user requests to join the room with id = 15 and passes <c>true</c> to the <i>dontLeave</i> flag; this will join the user in the new room while keeping him in the old room as well.
            			<code>
            			smartFox.JoinRoom(15, "", false, true);
            			</code>
            
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            the last two optional parameters enable the advanced multi-room join feature of SmartFoxServer, which allows a user to join two or more rooms at the same time. If this feature is not required, the parameters can be omitted.</para>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomDelegate"/><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnJoinRoomErrorDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.LeaveRoom(System.Int32)">
            <summary>
            Disconnect the user from the given room.<br/>
            This method should be used only when users are allowed to be present in more than one room at the same time (multi-room join feature).
            </summary>
            
            <param name="roomId">the id of the room to leave.</param>
            
            <example>The following example shows how to make a user leave a room.
            			<code>
            			smartFox.LeaveRoom(15);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.JoinRoom(System.Object,System.String,System.Boolean,System.Boolean,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomLeftDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomLeftDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)">
             <summary>
             Set one or more Room Variables.<br/>
             Room Variables are a useful feature to share data across the clients, keeping it in a centralized place on the server. When a user sets/updates/deletes one or more Room Variables, all the other users in the same room are notified. <br/>
             Allowed data types for Room Variables are Numbers, Strings and Booleans; in order save bandwidth, Arrays and Objects are not supported. Nevertheless, an array of values can be simulated, for example, by using an index in front of the name of each variable (check one of the following examples).<br/>
             If a Room Variable is set to <c>null</c>, it is deleted from the server.
             </summary>
             
             <param name="varList">an array of objects with the properties described farther on.</param>
             <param name="roomId">the id of the room where the variables should be set, in case of molti-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
             <param name="setOwnership"><c>false</c> to prevent the Room Variable change ownership when its value is modified by another user (optional).</param>
             
             <example>
             Each Room Variable is an object containing the following properties:
             <list type="table">
             <listheader>
             <term>term</term>
             <description>description</description>
             </listheader>
             <item>
             <term>name</term>
             <description>(<b>string</b>) the variable name.</description>
             </item><item>
             <term>value</term>
             <description>(<b>*</b>) the variable value.</description>
             </item><item>
             <term>isPrivate</term>
             <description>(<b>bool</b>) if {@code true}, the variable can be modified by its creator only (optional, default value: {@code false}).</description>
             </item><item>
             <term>isPersistent</term>
             <description>(<b>bool</b>) if {@code true}, the variable will exist until its creator is connected to the current zone; if {@code false}, the variable will exist until its creator is connected to the current room (optional, default value: {@code false}).</description>
             </item>
             </list>
             
             The following example shows how to save a persistent Room Variable called "score". This variable won't be destroyed when its creator leaves the room.
             			<code>
             			ArrayList rVars = new ArrayList();
             			rVars.Add(new RoomVariable("score", 2500, false, true));
             			
             			smartFox.SetRoomVariables(rVars);
             			</code>
             			
             			<hr/>
             			The following example shows how to save two Room Variables at once. The one called "bestTime" is private and no other user except its owner can modify it.
             			<code>
             			ArrayList rVars = new ArrayList();
             			rVars.Add(new RoomVariable("bestTime", 100, true, false));
             			rVars.Add(new RoomVariable("bestLap", 120));
             			
             			smartFox.SetRoomVariables(rVars);
             			</code>
             			
             			<hr/>
             			The following example shows how to delete a Room Variable called "bestTime" by setting its value to {@code null}.
             			<code>
             			ArrayList rVars = new ArrayList();
             			rVars.Add(new RoomVariable("bestTime", null));
             			
             			smartFox.SetRoomVariables(rVars);
             			</code>
             			
             			<hr/>
             			The following example shows how to handle the data sent in the previous example when the {@link SFSEvent#onRoomVariablesUpdate} event is received.
             			<code>
             			SFSEvent.onRoomVariablesUpdate += OnRoomVariablesUpdate;
             			
            			public void OnRoomVariablesUpdate(Room room, Hashtable changedVars)
            			{
            			    // Iterate on the 'changedVars' Hashtable to check which variables were updated
            			        foreach (string v in changedVars.Keys)
            						Trace.WriteLine(v + " room variable was updated; new value is: " + room.GetVariable(v));
            			}
             			</code>
             			
             			<hr/>
             			The following example shows how to update a Room Variable without affecting the variable's ownership.
             			By default, when a user updates a Room Variable, he becomes the "owner" of that variable. In some cases it could be needed to disable this behavoir by setting the <i>setOwnership</i> property to {@code false}. 
             			<code>
             			// For example, a variable that is defined in the server-side xml configuration file is owned by the Server itself;
             			// if it's not set to private, its owner will change as soon as a user updates it.
             			// To avoid this change of ownership the setOwnership flag is set to false.
             			ArrayList rVars = new ArrayList();
             			rVars.Add(new RoomVariable("shipPosX", 100));
             			rVars.Add(new RoomVariable("shipPosY", 200));
             			
             			smartFox.SetRoomVariables(rVars, smartFox.GetActiveRoom().GetId(), false);
             			</code>
             </example>
             
             <seealso cref="M:SmartFoxClientAPI.Data.Room.GetVariable(System.String)"/>
             <seealso cref="M:SmartFoxClientAPI.Data.Room.GetVariables"/>
             <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoomVariablesUpdateDelegate"/>
             
             <remarks>
             <para><b>Sends:</b><br/>
             <see cref="T:SmartFoxClientAPI.SFSEvent.OnRoomVariablesUpdateDelegate"/></para>
             <para><b>Version:</b><br/>
             SmartFoxServer Basic / Pro</para>
             </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendPublicMessage(System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendPublicMessage(System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendPublicMessage(System.String,System.Int32)">
            <summary>
            Send a public message.<br/>
            The message is broadcasted to all users in the current room, including the sender.
            </summary>
            
            <param name="message">the text of the public message.</param>
            <param name="roomId">the id of the target room, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to send and receive a public message.
            			<code>
            			SFSEvent.onPublicMessage += OnPublicMessage;
            			
            			smartFox.SendPublicMessage("Hello world!");
            			
            			public void OnPublicMessage(string message, User sender, int roomId)
            			{
            				Trace.WriteLine("User " + sender.getName() + " said: " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendPrivateMessage(System.String,System.Int32,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnPublicMessageDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnPublicMessageDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendPrivateMessage(System.String,System.Int32)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendPrivateMessage(System.String,System.Int32,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendPrivateMessage(System.String,System.Int32,System.Int32)">
            <summary>
            Send a private message to a user.<br/>
            The message is broadcasted to the recipient and the sender.
            </summary>
            
            <param name="message">the text of the public message.</param>
            <param name="recipientId">the id of the recipient user.</param>
            <param name="roomId">the id of the room from where the message is sent, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to send and receive a private message.
            			<code>
            			SFSEvent.onPrivateMessage += OnPrivateMessage;
            			
            			smartFox.SendPrivateMessage("Hallo Jack!", 22);
            			
            			public void OnPrivateMessage(string message, User sender, int roomId, int userId)
            			{
            				Trace.WriteLine("User " + sender.getName() + " sent the following private message: " + message);
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendPublicMessage(System.String,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnPrivateMessageDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnPrivateMessageDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendModeratorMessage(System.String,System.String,System.Int32)">
            <summary>
            Send a Moderator message to the current zone, the current room or a specific user in the current room.<br/>
            In order to send these kind of messages, the user must have Moderator's privileges, which are set by SmartFoxServer when the user logs in (see the <see cref="M:SmartFoxClientAPI.SmartFoxClient.Login(System.String,System.String,System.String)"/> method).
            </summary>
            
            <param name="message">the text of the message.</param>
            <param name="type">the type of message. The following constants can be passed: <see cref="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_USER"/>, <see cref="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_ROOM"/> and <see cref="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_ZONE"/>, to send the message to a user, to the current room or to the entire current zone respectively.</param>
            <param name="id">the id of the recipient room or user (ignored if the message is sent to the zone).</param>
            
            <example>The following example shows how to send a Moderator message.
            			<code>
            			smartFox.SendModeratorMessage("Greetings from the Moderator", SmartFoxClient.MODMSG_TO_ROOM, smartFox.GetActiveRoom());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.Login(System.String,System.String,System.String)"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_USER"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_ROOM"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.MODMSG_TO_ZONE"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnModeratorMessageDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnModeratorMessageDelegate"/></para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.4.5</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendObject(SmartFoxClientAPI.Data.SFSObject)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendObject(SmartFoxClientAPI.Data.SFSObject,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendObject(SmartFoxClientAPI.Data.SFSObject,System.Int32)">
            <summary>
            Send an SFSObject to the other users in the current room.<br/>
            This method can be used to send complex/nested data structures to clients, like a game move or a game status change. Supported data types are: Strings, Booleans, Numbers, Arrays, Objects.
            </summary>
            
            <param name="obj">the SFSObject to be sent.</param>
            <param name="roomId">the id of the target room, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to send a simple object with primitive data to the other users.
            			<code>
              SFSObject move = new SFSObject();
              move.Put("x", 150);
              move.Put("y", 250);
              move.Put("speed", 8);
              smartFox.SendObject(move);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendObjectToGroup(SmartFoxClientAPI.Data.SFSObject,System.Collections.ArrayList,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnObjectReceivedDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnObjectReceivedDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendObjectToGroup(SmartFoxClientAPI.Data.SFSObject,System.Collections.ArrayList)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendObjectToGroup(SmartFoxClientAPI.Data.SFSObject,System.Collections.ArrayList,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendObjectToGroup(SmartFoxClientAPI.Data.SFSObject,System.Collections.ArrayList,System.Int32)">
            <summary>
            Send an SFSObject to a group of users in the room.
            See <see cref="M:SmartFoxClientAPI.SmartFoxClient.SendObject(SmartFoxClientAPI.Data.SFSObject,System.Int32)"/> for more info.
            </summary>
            
            <param name="obj">the SFSObject to be sent.</param>
            <param name="userList">an ArrayList containing the id(s) of the recipients.</param>
            <param name="roomId">the id of the target room, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to send a simple object with primitive data to two users.
            			<code>
              SFSObject move = new SFSObject();
              move.Put("x", 150);
              move.Put("y", 250);
              move.Put("speed", 8);
              smartFox.SendObject(move);
              
            ArrayList userList = new ArrayList();
            userList.Add(11);
            userList.Add(12);
            
            			smartFox.SendObjectToGroup(move, userList);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SendObject(SmartFoxClientAPI.Data.SFSObject,System.Int32)"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnObjectReceivedDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnObjectReceivedDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SendXtMessage(System.String,System.String,System.Collections.ICollection,System.String,System.Int32)">
            <summary>
            Send a request to a server side extension.<br/>
            The request can be serialized using three different protocols: XML, JSON and string-based (aka "raw protocol"). <br/>
            XML and JSON can both serialize complex objects with any level of nested properties, while the string protocol allows to send linear data delimited by a separator (see the <see cref="M:SmartFoxClientAPI.SmartFoxClient.GetRawProtocolSeparator"/> property).
            </summary>
            
            <param name="xtName">the name of the extension (see also the <see cref="M:SmartFoxClientAPI.SmartFoxClient.CreateRoom(System.Collections.Hashtable,System.Int32)"/> method).</param>
            <param name="cmd">the name of the action/command to execute in the extension.</param>
            <param name="paramObj">an object (Hashtable for XML and JSON, ArrayList for string) containing the data to be passed to the extension (set to empty object if no data is required).</param>
            <param name="type">the protocol to be used for serialization (optional). The following constants can be passed: <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_XML"/>, <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR"/>, <see cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_JSON"/>.</param>
            <param name="roomId">the id of the room where the request was originated, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to notify a multiplayer game server-side extension that a game action occurred.
            			<code>
            			// A bullet is being fired
              Hashtable bulletInfo = new Hashtable();
              bulletInfo["type"] = "bullet";
              bulletInfo["posx"] = 100;
              bulletInfo["posy"] = 200;
              bulletInfo["speed"] = 10;
              bulletInfo["angle"] = 45;
            			
            			// Invoke "fire" command on the extension called "gameExt", using JSON protocol
            			smartFox.SendXtMessage("gameExt", "fire", bulletInfo, SmartFoxClient.XTMSG_TYPE_JSON);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.GetRawProtocolSeparator"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_XML"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_JSON"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.XTMSG_TYPE_STR"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnExtensionResponseDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetUserVariables(System.Collections.Hashtable)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SetUserVariables(System.Collections.Hashtable,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetUserVariables(System.Collections.Hashtable,System.Int32)">
            <summary>
            Set on or more User Variables.<br/>
            User Variables are a useful tool to store user data that has to be shared with other users. When a user sets/updates/deletes one or more User Variables, all the other users in the same room are notified. <br/>
            Allowed data types for User Variables are Numbers, Strings and Booleans; Arrays and Objects are not supported in order save bandwidth.<br/>
            If a User Variable is set to <c>null</c>, it is deleted from the server. Also, User Variables are destroyed when their owner logs out or gets disconnected.
            </summary>
            
            <param name="varObj">an object in which each property is a variable to set/update.</param>
            <param name="roomId">the room id where the request was originated, in case of molti-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to save the user data (avatar name and position) in an avatar chat application.
            			<code>
            			Hashtable uVars = new Hashtable();
            			uVars.Add("myAvatar", "Homer");
            			uVars.Add("posx", 100);
            			uVars.Add("posy", 200);
            			
            			smartFox.SetUserVariables(uVars);
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetVariable(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetVariables"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnUserVariablesUpdateDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnUserVariablesUpdateDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetRandomKey">
            <summary>
            Retrieve a random string key from the server.<br/>
            This key is also referred in the SmartFoxServer documentation as the "secret key".<br/>
            It's a unique key, valid for the current session only. It can be used to create a secure login system.
            </summary>
            
            <example>The following example shows how to handle the request a random key to the server.
            			<code>
            			SFSEvent.onRandomKey += OnRandomKey;
            			
            			smartFox.GetRandomKey();
            			
            			public void OnRandomKey(string key)
            			{
            				Trace.WriteLine("Random key received from server: " + key)
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRandomKeyDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnRandomKeyDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetVersion">
            <summary>
            Get the SmartFoxServer Flash API version.
            </summary>
            
            <returns>The current version of the SmartFoxServer client API.</returns>
            
            <example>The following example shows how to trace the SmartFoxServer API version.
            			<code>
            			Trace.WriteLine("Current API version: " + smartFox.GetVersion());
            			</code>
            </example>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.RoundTripBench">
            <summary>
            Send a roundtrip request to the server to test the connection' speed.<br/>
            The roundtrip request sends a small packet to the server which immediately responds with another small packet, and causing the {@link SFSEvent#onRoundTripResponse} event to be fired.<br/>
            The time taken by the packet to travel forth and back is called "roundtrip time" and can be used to calculate the average network lag of the client.<br/>
            A good way to measure the network lag is to send continuos requests (every 3 or 5 seconds) and then calculate the average roundtrip time on a fixed number of responses (i.e. the last 10 measurements).
            </summary>
            
            <example>The following example shows how to check the average network lag time.
            			<code>
            			SFSEvent.onRoundTripResponse += OnRoundTripResponse;
            			
            			int totalPingTime = 0;
            			int pingCount = 0;
            			
            			smartFox.RoundTripBench(); // TODO: this method must be called repeatedly every 3-5 seconds to have a significant average value
            			
            			public void OnRoundTripResponse(int elapsed)
            			{
            				
            				// We assume that it takes the same time to the ping message to go from the client to the server
            				// and from the server back to the client, so we divide the elapsed time by 2.
            				totalPingTime += elapsed / 2;
            				pingCount++;
            				
            				int avg = Math.Round(totalPingTime / pingCount);
            				
            				Trace.WriteLine("Average lag: " + avg + " milliseconds");
            			}
            			</code>
            </example>
            
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnRoundTripResponseDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnRoundTripResponseDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SwitchSpectator">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SwitchSpectator(System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SwitchSpectator(System.Int32)">
            <summary>
            Turn a spectator inside a game room into a player. <br/>
            All spectators have their <b>player id</b> property set to -1; when a spectator becomes a player, his player id gets a number &gt; 0, representing the player number. The player id values are assigned by the server, based on the order in which the players joined the room.<br/>
            If the user joined more than one room, the id of the room where the switch should occur must be passed to this method.<br/>
            The switch operation is successful only if at least one player slot is available in the room.
            </summary>
            
            <param name="roomId">the id of the room where the spectator should be switched, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to turn a spectator into a player.
            			<code>
            			SFSEvent.onSpectatorSwitched += OnSpectatorSwitched;
            			
            			smartFox.SwitchSpectator();
            			
            			public void OnSpectatorSwitched(bool success, int newId, Room room)
            			{
            				if (success)
            					Trace.WriteLine("You have been turned into a player; your player id is " + newId);
            				else
            					Trace.WriteLine("The attempt to switch from spectator to player failed");
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.IsSpectator"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnSpectatorSwitchedDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnSpectatorSwitchedDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SwitchPlayer">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.SwitchPlayer(System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SwitchPlayer(System.Int32)">
            <summary>
            Turn a player inside a game room into a spectator. <br/>
            All players have their <b>player id</b> property set to a value &gt; 0; when a spectator becomes a player, his playerId is set to -1.<br/>
            If the user joined more than one room, the id of the room where the switch should occurr must be passed to this method.<br/>
            The switch operation is successful only if at least one spectator slot is available in the room.<br/>
            </summary>
            
            <param name="roomId">the id of the room where the player should be switched to spectator, in case of multi-room join (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.activeRoomId"/>).</param>
            
            <example>The following example shows how to turn a player into a spectator.
            			<code>
            			SFSEvent.onPlayerSwitched += OnPlayerSwitched;
            			
            			smartFox.SwitchPlayer();
            			
            			public void OnPlayerSwitched(bool success, int newId, Room room)
            			{
            				if (success)
            					Trace.WriteLine("You have been turned into a spectator; your id is " + newId);
            				else
            					Trace.WriteLine("The attempt to switch from player to spectator failed!");
            			}
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.IsSpectator"/>
            <seealso cref="T:SmartFoxClientAPI.SFSEvent.OnPlayerSwitchedDelegate"/>
            
            <remarks>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnPlayerSwitchedDelegate"/></para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.GetUploadPath">
            <summary>
            Get the default upload path of the embedded webserver.
            </summary>
            
            <returns>The http address of the default folder in which files are uploaded.</returns>
            
            <example>The following example shows how to get the default upload path.
            			<code>
            			string path = smartFox.GetUploadPath();
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String,System.Int32)"/>
            
            <remarks>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.5.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String)">
            <summary><see cref="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.UploadFile(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Upload a file to the embedded webserver.
            </summary>
            
            <param name="filePath">the FileReference object (see the example).</param>
            <param name="id">the user id (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.myUserId"/>).</param>
            <param name="nick">the user name (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.myUserName"/>).</param>
            <param name="port">the webserver's TCP port (optional, default value: <see cref="F:SmartFoxClientAPI.SmartFoxClient.httpPort"/>).</param>
            
            <example>Check the Upload Tutorial available here: <a href="http://www.smartfoxserver.com/docs/docPages/tutorials_pro/14_imageManager/">Tutorial</a>
            </example>
            
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.myUserId"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.myUserName"/>
            <seealso cref="F:SmartFoxClientAPI.SmartFoxClient.httpPort"/>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            upload events fired in response should be handled by the provided FileReference object (see the example).</para>
            <para><b>Sends:</b><br/>
            <see cref="T:SmartFoxClientAPI.SFSEvent.OnSpectatorSwitchedDelegate"/></para>
            <para><b>Since:</b><br/>
            SmartFoxServer Pro v1.5.0</para>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.SmartFoxClient.SetSocketPollDelay(System.Int32)">
            <summary>
            Set delay in socket polling
            </summary>
            
            <param name="delay">milliseconds to sleep between reading socket data. Defaults to no delay</param>
            
            <remarks>
            <para><b>Version:</b><br/>
            SmartFoxServer Basic / Pro</para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Handlers.ExtHandler">
            <summary>Extension handler class.</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Handlers.IMessageHandler">
            <summary>Handlers interface.</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.IMessageHandler.HandleMessage(System.Object,System.String)">
            <summary>
            Handle messages
            </summary>
            
            <param name="msgObj">the message object to handle</param>
            <param name="type">type of message</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.ExtHandler.#ctor(SmartFoxClientAPI.SmartFoxClient)">
            <summary>
            ExtHandler constructor.
            </summary>
            
            <param name="sfs">the smart fox client</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.ExtHandler.HandleMessage(System.Object,System.String)">
            <summary>
            Handle messages
            </summary>
            
            <param name="msgObj">the message object to handle</param>
            <param name="type">type of message</param>
        </member>
        <member name="T:LitJson.ExporterFunc">
        </member>
        <member name="T:LitJson.ImporterFunc">
        </member>
        <member name="T:LitJson.WrapperFactory">
        </member>
        <member name="T:LitJson.JsonMapper">
             JsonMapper.cs
               JSON to .Net object and object to JSON conversions.
            
             This file was modified from the original to not use System.Collection.Generics namespace.
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
        </member>
        <member name="M:LitJson.JsonMapper.ToJson(System.Object)">
        </member>
        <member name="M:LitJson.JsonMapper.ToJson(System.Object,LitJson.JsonWriter)">
        </member>
        <member name="M:LitJson.JsonMapper.ToObject(LitJson.JsonReader)">
        </member>
        <member name="M:LitJson.JsonMapper.ToObject(System.IO.TextReader)">
        </member>
        <member name="M:LitJson.JsonMapper.ToObject(System.String)">
        </member>
        <member name="M:LitJson.JsonMapper.ToWrapper(LitJson.WrapperFactory,LitJson.JsonReader)">
        </member>
        <member name="M:LitJson.JsonMapper.ToWrapper(LitJson.WrapperFactory,System.String)">
        </member>
        <member name="M:LitJson.JsonMapper.RegisterExporter(System.Type,LitJson.ExporterFunc)">
        </member>
        <member name="M:LitJson.JsonMapper.RegisterImporter(System.Type,System.Type,LitJson.ImporterFunc)">
        </member>
        <member name="M:LitJson.JsonMapper.UnregisterExporters">
        </member>
        <member name="M:LitJson.JsonMapper.UnregisterImporters">
        </member>
        <member name="T:SmartFoxClientAPI.Http.HttpConnection">
            <summary>Internal class for handling all HTTP based communication</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.Http.HttpConnection.HANDSHAKE_TOKEN">
            <summary>Token used in handshaking</summary>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.#ctor(SmartFoxClientAPI.SmartFoxClient)">
            <summary>
            HttpConnection constructor.
            </summary>
            
            <param name="sfs">The smartfox client</param>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.GetSessionId">
            <summary>
            Get the session id of the current connection.
            </summary>
            
            <returns>The session id</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.IsConnected">
            <summary>
            A boolean flag indicating if we are connected
            </summary>
            
            <returns><c>true</c> if the conection is open</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.Connect(System.String)">
            <summary><see cref="M:SmartFoxClientAPI.Http.HttpConnection.Connect(System.String,System.Int32)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.Connect(System.String,System.Int32)">
            <summary>
            Connect to the given server address and port
            </summary>
            
            <param name="ipAddr">Address of server</param>
            <param name="port">Port of server</param>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.GetWebUrl">
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.Close">
            <summary>
            Close current connection
            </summary>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.Send(System.String)">
            <summary>
            Send message to server
            </summary>
            
            <param name="message">Message to send</param>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpConnection.AddEventListener(System.String,SmartFoxClientAPI.Http.HttpConnection.HttpCallbackHandler)">
            <summary>
            Add callback methods to the given event
            </summary>
            
            <param name="evt">The event to listen to</param>
            <param name="method">The callback handler</param>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Http.HttpConnection.HttpCallbackHandler">
            <summary>Delegate for all HTTP callbacks</summary>
        </member>
        <member name="T:SmartFoxClientAPI.Data.User">
            <summary>The User class stores the properties of each user.<br/>
            This class is used internally by the <see cref="T:SmartFoxClientAPI.SmartFoxClient"/> class; also, User objects are returned by various methods and events of the SmartFoxServer API.</summary>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            in the provided examples, <c>user</c> always indicates a User instance.</para>
            
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.#ctor(System.Int32,System.String)">
            <summary>
            User constructor.
            </summary>
            
            <param name="id">the user id</param>
            <param name="name">the user name</param>
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.GetId">
            <summary>
            Get the id of the user.
            </summary>
            
            <returns>The id of the user</returns>
            
            <example>
            <code>
            			Trace.WriteLine("User id:" + user.GetId());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetName"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.GetName">
            <summary>
            Get the name of the user.
            </summary>
            
            <returns>The name of the user</returns>
            
            <example><code>
            			Trace.WriteLine("User name:" + user.GetName());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetId"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.GetVariable(System.String)">
            <summary>
            Retrieve a User Variable.
            </summary>
            
            <param name="varName">the name of the variable to retrieve.</param>
            
            <returns>The User Variable's value.</returns>
            
            <example>
            <code>
            			int age = (int)user.GetVariable("age");
            </code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetVariables"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetUserVariables(System.Collections.Hashtable,System.Int32)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.GetVariables">
            <summary>
            Retrieve the list of all User Variables.
            </summary>
            
            <returns>An associative array containing User Variables' values, where the key is the variable name.</returns>
            
            <example>
            <code>
            			Hashtable userVars = user.getVariables();
            			
            			foreach (string v in userVars.Keys)
            				Trace.WriteLine("Name:" + v + " | Value:" + userVars[v]);
            </code>
            </example>			
            
            <seealso cref="M:SmartFoxClientAPI.Data.User.GetVariable(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetUserVariables(System.Collections.Hashtable,System.Int32)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.SetVariables(System.Collections.Hashtable)">
            <summary>
            Set the User Variabless.
            </summary>
            
            <param name="o">an object containing variables' key-value pairs.</param>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.ClearVariables">
            <summary>
            Reset User Variabless.
            </summary>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.SetIsSpectator(System.Boolean)">
            <summary>
            Set the <see cref="M:SmartFoxClientAPI.Data.User.IsSpectator"/> property.
            </summary>
            
            <param name="b"><c>true</c> if the user is a spectator.</param>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.IsSpectator">
            <summary>
            A boolean flag indicating if the user is a spectator in the current room.
            </summary>
            
            <returns><c>true</c> if the user is a spectator.</returns>
            
            <example>
            <code>
            			if (user.IsSpectator())
            				Trace.WriteLine("The user is a spectator");
            </code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.SetModerator(System.Boolean)">
            <summary>
            Set the <see cref="M:SmartFoxClientAPI.Data.User.IsModerator"/> property.
            </summary>
            
            <param name="b"><c>true</c> if the user is a Moderator.</param>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.IsModerator">
            <summary>
            A boolean flag indicating if the user is a Moderator in the current zone.
            </summary>
            
            <returns><c>true</c> if the user is a Moderator</returns>
            
            <example>
            <code>
            			if (user.IsModerator())
            				Trace.WriteLine("The user is a Moderator");
            </code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.GetPlayerId">
            <summary>
            Retrieve the player id of the user.<br/>
            The user must be a player inside a game room for this method to work properly.<br/>
            This id is 1-based (player 1, player 2, etc.), but if the user is a spectator its value is -1.
            </summary>
            
            <returns>The current player id</returns>
            
            <example><code>
            			Trace.WriteLine("The user's player id is " + user.GetPlayerId());
            </code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.User.SetPlayerId(System.Int32)">
            <summary>
            Set the playerId property.
            </summary>
            
            <param name="pid">the playerId value</param>
            
            @exclude
        </member>
        <member name="T:SmartFoxClientAPI.Data.Room">
            <summary>The Room class stores the properties of each server room.<br/>
            This class is used internally by the <see cref="T:SmartFoxClientAPI.SmartFoxClient"/> class; also, Room objects are returned by various methods and events of the SmartFoxServer API.</summary>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            in the provided examples, <c>room</c> always indicates a Room instance.</para>
            
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.Room.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.Room.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.#ctor(System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Room constructor.
            </summary>
            
            <param name="id">the room id</param>
            <param name="name">the room name</param>
            <param name="maxUsers">the maximum number of users that can join the room simultaneously</param>
            <param name="maxSpectators">the maximum number of spectators in the room (for game rooms only)</param>
            <param name="isTemp"><c>true</c> if the room is temporary</param>
            <param name="isGame"><c>true</c> if the room is a "game room"</param>
            <param name="isPrivate"><c>true</c> if the room is private (password protected)</param>
            <param name="isLimbo"><c>true</c> if the room is a "limbo room"</param>
            <param name="userCount"></param>
            <param name="specCount"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.AddUser(SmartFoxClientAPI.Data.User,System.Int32)">
            <summary>
            Add a user to the room.
            </summary>
            
            <param name="u">the <see cref="T:SmartFoxClientAPI.Data.User"/> object</param>
            <param name="id">the user id</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.RemoveUser(System.Int32)">
                     * <summary>
            		 * Remove a user from the room.
            		 * </summary>
                     * 
            		 * <param name="id">the user id</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetUserList">
                     * <summary>
            		 * Get the list of users currently inside the room.<br/>
            		 * As the returned list is a Hashtable with user id(s) as keys, in order to iterate it <c>foreach</c> loop should be used.
            		 * </summary>
                     * 
                     * <returns>A list of <see cref="T:SmartFoxClientAPI.Data.User"/> objects</returns>
            		 * 
            		 * <example>
                     * <code>
            		 * Hashtable users = room.GetUserList();
            		 * 			
            		 * foreach (User u in users.Values)
            	 	 *  Trace.WriteLine(u.GetName());
            		 * </code>
                     * </example>
            		 * 
                     * <seealso cref="M:SmartFoxClientAPI.Data.Room.GetUser(System.Object)"/>
            		 * <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            		 * 
                     * <remarks>
            		 * <b>Version:</b><br/>
                     * SmartFoxServer Basic / Pro
                     * </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.SetUserList(System.Collections.Hashtable)">
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetUser(System.Object)">
            <summary>
            Retrieve a user currently in the room.
            </summary>
            
            <param name="userId">the user name (<c>string</c>) or the id (<c>int</c>) of the user to retrieve</param>
            
            <returns>A {<see cref="T:SmartFoxClientAPI.Data.User"/>} object</returns>
            
            <example>
            <code>
            			User user = room.GetUser("jack");
            </code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetUserList"/>
            <seealso cref="T:SmartFoxClientAPI.Data.User"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.ClearUserList">
                     * <summary>
            		 * Reset users list.
            		 * </summary>
                     * 
            		 * @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetVariable(System.String)">
            <summary>
            Retrieve a Room Variable.
            </summary>
            
            <param name="varName">the name of the variable to retrieve</param>
            
            <returns>The Room Variable's value</returns>
            
            <example>
            <code>
            			string location = (string)room.GetVariable("location");
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetVariables"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetVariables">
            <summary>
            Retrieve the list of all Room Variables.
            </summary>
            
            <returns>An associative array containing Room Variables' values, where the key is the variable name</returns>
            
            <example>
            <code>
            			Hashtable roomVars = room.GetVariables();
            			
            			foreach (string v in roomVars.Keys)
            				Trace.WriteLine("Name:" + v + " | Value:" + room.GetVariable(v));
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetVariable(System.String)"/>
            <seealso cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.SetVariables(System.Collections.Hashtable)">
                     * <summary>
            		 * Set the Room Variables.
            		 * </summary>
                     * 
                     * <param name="vars">an array of Room Variables</param>
            		 * 
            		 * @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.ClearVariables">
                     * <summary>
            		 * Reset Room Variables.
            		 * </summary>
                     * 
            		 * @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetName">
            <summary>
            Get the name of the room.
            </summary>
            
            <returns>The name of the room</returns>
            
            <example><code>
            			Trace.WriteLine("Room name:" + room.GetName());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetId"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetId">
            <summary>
            Get the id of the room.
            </summary>
            
            <returns>The id of the room</returns>
            
            <example>
            <code>
            			Trace.WriteLine("Room id:" + room.GetId());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetName"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.IsTemp">
            <summary>
            A boolean flag indicating if the room is dynamic/temporary.<br/>
            This is always true for rooms created at runtime on client-side.
            </summary>
            
            <returns><c>true</c> if the room is a dynamic/temporary room</returns>
            
            <example><code>
            			if (room.IsTemp())
            				Trace.WriteLine("Room is temporary");
            			</code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.IsGame">
            <summary>
            A boolean flag indicating if the room is a "game room".
            </summary>
            
            <returns><c>true</c> if the room is a "game room"</returns>
            
            <example>
            <code>
            			if (room.IsGame())
            				Trace.WriteLine("This is a game room");
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.IsLimbo"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.IsPrivate">
            <summary>
            A boolean flag indicating if the room is private (password protected).
            </summary>
            
            <returns><c>true</c> if the room is private</returns>
            
            <example>
            <code>
            			if (room.IsPrivate())
            				Trace.WriteLine("Password required for this room");
            			</code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetUserCount">
            <summary>
            Retrieve the number of users currently inside the room.
            </summary>
            
            <returns>The number of users in the room</returns>
            
            <example>
            <code>
            			int usersNum = room.GetUserCount();
            			Trace.WriteLine("There are " + usersNum + " users in the room");
            </code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetSpectatorCount"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetSpectatorCount">
            <summary>
            Retrieve the number of spectators currently inside the room.
            </summary>
            
            <returns>The number of spectators in the room</returns>
            
            <example>
            <code>
            			int specsNum = room.GetSpectatorCount();
            			Trace.WriteLine("There are " + specsNum + " spectators in the room");
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetUserCount"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetMaxUsers">
            <summary>
            Retrieve the maximum number of users that can join the room.
            </summary>
            
            <returns>The maximum number of users that can join the room</returns>
            
            <example>
            <code>
            			Trace.WriteLine("Max users allowed to join the room: " + room.GetMaxUsers());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetMaxSpectators"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetMaxSpectators">
            <summary>
            Retrieve the maximum number of spectators that can join the room.<br/>
            Spectators can exist in game rooms only.
            </summary>
            
            <returns>The maximum number of spectators that can join the room</returns>
            
            <example>
            <code>
            			if (room.IsGame())
            				Trace.WriteLine("Max spectators allowed to join the room: " + room.GetMaxSpectators());
            			</code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.GetMaxUsers"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.SetMyPlayerIndex(System.Int32)">
            <summary>
            <para>
            Set the myPlayerId property.<br/>
            Each room where the current client is connected contains a myPlayerId (if the room is a gameRoom).<br/>
            myPlayerId == -1 ... user is a spectator<br/>
            myPlayerId  > 0  ...	user is a player<br/>
            </para>
            </summary>
            
            <param name="id">the myPlayerId value</param>
            
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.GetMyPlayerIndex">
            <summary>
            Retrieve the player id for the current user in the room.<br/>
            This id is 1-based (player 1, player 2, etc.), but if the user is a spectator its value is -1.
            </summary>
            
            <returns>The player id for the current user</returns>
            
            <example>
            <code>
            			if (room.IsGame())
            				Trace.WriteLine("My player id in this room: " + room.GetMyPlayerIndex());
            			</code>
            </example>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.SetIsLimbo(System.Boolean)">
                     * <summary>
            		 * Set the <see>isLimbo</see> property.
            		 * </summary>
                     * 
            		 * <param name="b"><c>true</c>if the room is a "limbo room"</param>
            		 * 
            		 * @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.IsLimbo">
            <summary>
            A boolean flag indicating if the room is in "limbo mode".
            </summary>
            
            <returns><c>true</c> if the room is in "limbo mode"</returns>
            
            <example>
            <code>
            			if (room.IsLimbo())
            				Trace.WriteLine("This is a limbo room");
            </code>
            </example>
            
            <seealso cref="M:SmartFoxClientAPI.Data.Room.IsGame"/>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.SetUserCount(System.Int32)">
                     * <summary>
            		 * See the number of users in the room.
            		 * </summary>
                     * 
            		 * <param name="n">the number of users</param>
            		 * 
            		 * @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Data.Room.SetSpectatorCount(System.Int32)">
                     * <summary>
            		 * See the number of spectators in the room.
            		 * </summary>
                     * 
            		 * <param name="n">the number of spectators</param>
            		 * 
            		 * @exclude
        </member>
        <member name="T:SmartFoxClientAPI.Util.Entities">
            <summary>Entities class</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.1</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008,2009 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.Entities.EncodeEntities(System.String)">
            <summary>
            Encode given entities
            </summary>
            
            <param name="st">String to encode</param>
            
            <returns>Encoded entities</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.Entities.DecodeEntities(System.String)">
            <summary>
            Decode entity string
            </summary>
            
            <param name="st">String to decode</param>
            
            <returns>Decoded entities</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Util.SyncArrayList">
            <summary>
            Synchronized wrapper around the unsynchronized ArrayList class
            </summary>
            
            <remarks>
            From here: http://www.c-sharpcorner.com/UploadFile/alexfila/ThreadSafe11222005234917PM/ThreadSafe.aspx
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.ToArrayList">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.ObjectAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.AddRange(System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Capacity">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="Value"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SyncArrayList.GetEnumerator">
            <summary>
            
            </summary>
        </member>
        <member name="T:SmartFoxClientAPI.Data.SFSObject">
            <summary>SFS object class</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.#ctor">
            <summary>
            SFSObject constructor
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.Put(System.Object,System.Object)">
            <summary>
            Put generic object value into SFSObject
            </summary>
            
            <param name="key">Key name to use</param>
            <param name="value">Value to put into SFSObject</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.PutNumber(System.Object,System.Double)">
            <summary>
            Put number object value into SFSObject
            </summary>
            
            <param name="key">Key name to use</param>
            <param name="value">Value to put into SFSObject</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.PutBool(System.Object,System.Boolean)">
            <summary>
            Put bool object value into SFSObject
            </summary>
            
            <param name="key">Key name to use</param>
            <param name="value">Value to put into SFSObject</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.PutList(System.Object,System.Collections.IList)">
            <summary>
            Put List object value into SFSObject
            </summary>
            
            <param name="key">Key name to use</param>
            <param name="collection">Value to put into SFSObject</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.PutDictionary(System.Object,System.Collections.IDictionary)">
            <summary>
            Put Dictionary object value into SFSObject
            </summary>
            
            <param name="key">Key name to use</param>
            <param name="collection">Value to put into SFSObject</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.Get(System.Object)">
            <summary>
            Get generic object value from SFSObject
            </summary>
            
            <returns>Object value</returns>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.GetString(System.Object)">
            <summary>
            Get string object value from SFSObject
            </summary>
            
            <returns>Object value</returns>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.GetNumber(System.Object)">
            <summary>
            Get double object value from SFSObject
            </summary>
            
            <returns>Object value</returns>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.GetBool(System.Object)">
            <summary>
            Get bool object value from SFSObject
            </summary>
            
            <returns>Object value</returns>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.GetObj(System.Object)">
            <summary>
            Get SFSObject object value from SFSObject
            </summary>
            
            <returns>Object value</returns>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.GetObj(System.Int32)">
            <summary>
            Get SFSObject object value from SFSObject
            </summary>
            
            <returns>Object value</returns>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.Size">
            <summary>
            Get number of values in this SFSObject
            </summary>
            
            <returns>Number of values</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.Keys">
            <summary>
            Get all keys with values in this SFSObject
            </summary>
            
            <returns>All keys</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Data.SFSObject.Remove(System.Object)">
            <summary>
            Remove object value from SFSObject
            </summary>
            
            <param name="key">Key name to use</param>
        </member>
        <member name="T:LitJson.Lexer">
             Lexer.cs
               JSON lexer implementation based on a finite state machine.
            
             This file was modified from the original to not use System.Collection.Generics namespace.
             
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="T:LitJson.JsonException">
             JsonException.cs
               Base class throwed by LitJSON when a parsing error occurs.
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="M:LitJson.JsonException.#ctor">
        </member>
        <member name="M:LitJson.JsonException.#ctor(System.String)">
        </member>
        <member name="M:LitJson.JsonException.#ctor(System.String,System.Exception)">
        </member>
        <member name="T:SmartFoxClientAPI.Handlers.SysHandler">
            <summary>SysHandler class: handles "sys" type messages.</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.1.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008,2009 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.#ctor(SmartFoxClientAPI.SmartFoxClient)">
            <summary>
            SysHandler constructor.
            </summary>
            
            <param name="sfs">the smart fox client</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleMessage(System.Object,System.String)">
            <summary>
            Handle messages
            </summary>
            
            <param name="msgObj">the message object to handle</param>
            <param name="type">type of message</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleApiOK(System.Xml.XmlNode)">
            <summary>
            Handle correct API
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleApiKO(System.Xml.XmlNode)">
            <summary>
            Handle obsolete API
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleLoginOk(System.Xml.XmlNode)">
            <summary>
            Handle successful login
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleLoginKo(System.Xml.XmlNode)">
            <summary>
            Handle unsuccessful login
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleLogout(System.Xml.XmlNode)">
            <summary>
            Handle successful logout
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRoomList(System.Xml.XmlNode)">
            <summary>
            Populate the room list for this zone and fire the event
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleUserCountChange(System.Xml.XmlNode)">
            <summary>
            Handle the user count change in a room
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleJoinOk(System.Xml.XmlNode)">
            <summary>
            Successfull room Join
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleJoinKo(System.Xml.XmlNode)">
            <summary>
            Failed room Join
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleUserEnterRoom(System.Xml.XmlNode)">
            <summary>
            New user enters the room
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleUserLeaveRoom(System.Xml.XmlNode)">
            <summary>
            User leaves a room
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandlePublicMessage(System.Xml.XmlNode)">
            <summary>
            Handle public message
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandlePlayerSwitched(System.Xml.XmlNode)">
            <summary>
            Handle player switched
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandlePrivateMessage(System.Xml.XmlNode)">
            <summary>
            Handle private message
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleAdminMessage(System.Xml.XmlNode)">
            <summary>
            Handle admin message
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleModMessage(System.Xml.XmlNode)">
            <summary>
            Handle moderator message
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleSFSObject(System.Xml.XmlNode)">
            <summary>
            Handle SFS object received
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRoomVarsUpdate(System.Xml.XmlNode)">
            <summary>
            Handle update of room variables
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleUserVarsUpdate(System.Xml.XmlNode)">
            <summary>
            Handle update of user variables
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRoomAdded(System.Xml.XmlNode)">
            <summary>
            Handle room added
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRoomDeleted(System.Xml.XmlNode)">
            <summary>
            Handle room deleted
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRandomKey(System.Xml.XmlNode)">
            <summary>
            Handle random key received
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRoundTripBench(System.Xml.XmlNode)">
            <summary>
            Handle reound trip benchmark
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleCreateRoomError(System.Xml.XmlNode)">
            <summary>
            Handle unsuccessful create room
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleBuddyList(System.Xml.XmlNode)">
            <summary>
            Handle buddy list received
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleBuddyListUpdate(System.Xml.XmlNode)">
            <summary>
            Handle update of buddy list
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleAddBuddyPermission(System.Xml.XmlNode)">
            <summary>
            Handle permission to add buddy
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleBuddyAdded(System.Xml.XmlNode)">
            <summary>
            Handle buddy added
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleRemoveBuddy(System.Xml.XmlNode)">
            <summary>
            Handle remove buddy
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleBuddyRoom(System.Xml.XmlNode)">
            <summary>
            Handle buddy room
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleLeaveRoom(System.Xml.XmlNode)">
            <summary>
            Handle leave room
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.HandleSpectatorSwitched(System.Xml.XmlNode)">
            <summary>
            Handle spectator switched
            </summary>
            
            <param name="xml">message object</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.PopulateVariables(System.Collections.Hashtable,System.Xml.XmlNode)">
            <summary><see cref="M:SmartFoxClientAPI.Handlers.SysHandler.PopulateVariables(System.Collections.Hashtable,System.Xml.XmlNode,System.Collections.Hashtable)"/></summary>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.PopulateVariables(System.Collections.Hashtable,System.Xml.XmlNode,System.Collections.Hashtable)">
            <summary>
            Takes an SFS variables XML node and store it in an array<br/>
            Usage: for parsing room and user variables
            </summary>
            
            <param name="variables">variable list to populate</param>
            <param name="xmlData">the XML variables node</param>
            <param name="changedVars">list of changed variables</param>
        </member>
        <member name="M:SmartFoxClientAPI.Handlers.SysHandler.DispatchDisconnection">
            <summary>
            Handle disconnects
            </summary>
        </member>
        <member name="T:SmartFoxClientAPI.Data.NewRoomDescriptor">
            <summary>The NewRoomDescriptor class stores the properties of a new room for room creation methods.</summary>
            
            <remarks>
            <para><b>NOTE:</b><br/>
            in the provided examples, <c>room</c> always indicates a Room instance.</para>
            
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008-2009 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Collections.ArrayList,SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor,System.String,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Collections.ArrayList,SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor,System.String,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Collections.ArrayList,SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor)">
            <summary>
            <see cref="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Collections.ArrayList,SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor,System.String,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.NewRoomDescriptor.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Collections.ArrayList,SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor,System.String,System.Boolean,System.Boolean)">
            <summary>
            NewRoomDescriptor constructor.
            </summary>
            
            <param name="name">the room name</param>
            <param name="maxUsers">the maximum number of users that can join the room.</param>
            <param name="isGame">if <c>true</c>, the room is a game room (optional, default value: <c>false</c>).</param>
            <param name="maxSpectators">in game rooms only, the maximum number of spectators that can join the room (optional, default value: 0).</param>
            <param name="variables">an ArrayList of Room Variables, as described in the <see cref="M:SmartFoxClientAPI.SmartFoxClient.SetRoomVariables(System.Collections.ArrayList,System.Int32,System.Boolean)"/> method documentation (optional, default: none).</param>
            <param name="extension">a NewRoomDescriptor.ExtensionDescriptor, as descriped in <see cref="M:SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor.#ctor(System.String,System.String)"/> describing which extension should be dynamically attached to the room, as described farther on (optional, default: none).</param>
            <param name="password">a password to make the room private (optional, default: none)</param>
            <param name="exitCurrentRoom">if <c>true</c> and in case of game room, the new room is joined after creation (optional, default value: <c>true</c>).</param>
            <param name="receiveUCount">if <c>true</c>, the new room will receive the <see cref="T:SmartFoxClientAPI.SFSEvent.OnUserCountChangeDelegate"/> notifications (optional, default <u>recommended</u> value: <c>false</c>).</param>
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.Name">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.Password">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.MaxUsers">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.MaxSpectators">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.IsGame">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.ExitCurrentRoom">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.ReceiveUCount">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.Variables">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.Extension">
        </member>
        <member name="T:SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor">
            <summary>The ExtensionDescriptor class stores the properties of a extension (name and script) for room creation.</summary>
        </member>
        <member name="M:SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor.#ctor(System.String,System.String)">
            <summary>ExtensionDescriptor constructor.</summary>
            
            <param name="name">the name used to reference the extension (see the SmartFoxServer server-side configuration).</param>
            <param name="script">the file name of the extension script (for Actionscript and Python); if Java is used, the fully qualified name of the extension must be provided. The file name is relative to the root of the extension folder ("sfsExtensions/" for Actionscript and Python, "javaExtensions/" for Java).</param>
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor.Name">
        </member>
        <member name="P:SmartFoxClientAPI.Data.NewRoomDescriptor.ExtensionDescriptor.Script">
        </member>
        <member name="T:SmartFoxClientAPI.Util.MathUtil">
            <summary>Math utilities</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.MathUtil.IsNumeric(System.Object)">
            <summary>
            Check if given object is numeric
            </summary>
            
            <param name="expression">Object to inspect</param>
            
            <returns><c>true</c> if object is numeric</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="T:SmartFoxClientAPI.Util.SFSObjectSerializer">
            <summary>SFS Object Serializer and Deserializer Class.</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.1</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SFSObjectSerializer.GetInstance">
            <summary>
            Get instance of this serializer
            </summary>
            
            <returns>Singleton instance of this serializer</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SFSObjectSerializer.Serialize(SmartFoxClientAPI.Data.SFSObject)">
            <summary>
            Serialize given object
            </summary>
            
            <param name="ao">Object to serialize</param>
            
            <returns>Serialized object</returns>
        </member>
        <member name="M:SmartFoxClientAPI.Util.SFSObjectSerializer.Deserialize(System.String)">
            <summary>
            Deserialize given string to object
            </summary>
            
            <param name="xmlData">String to deserialize</param>
            
            <returns>Deserialized object</returns>
        </member>
        <member name="T:SmartFoxClientAPI.Http.RequestState">
            <summary>Class that stores the state of the request.</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.RequestState.#ctor">
            <summary>
            RequestState constructor.
            </summary>
        </member>
        <member name="M:SmartFoxClientAPI.Http.RequestState.GetRequest">
            <summary>
            Gets current request
            </summary>
            
            <returns>The current request</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.RequestState.SetRequest(System.Net.WebRequest)">
            <summary>
            Set new request
            </summary>
            
            <param name="request">The new request</param>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="T:LitJson.JsonToken">
        </member>
        <member name="F:LitJson.JsonToken.None">
        </member>
        <member name="F:LitJson.JsonToken.ObjectStart">
        </member>
        <member name="F:LitJson.JsonToken.PropertyName">
        </member>
        <member name="F:LitJson.JsonToken.ObjectEnd">
        </member>
        <member name="F:LitJson.JsonToken.ArrayStart">
        </member>
        <member name="F:LitJson.JsonToken.ArrayEnd">
        </member>
        <member name="F:LitJson.JsonToken.Int">
        </member>
        <member name="F:LitJson.JsonToken.Long">
        </member>
        <member name="F:LitJson.JsonToken.Double">
        </member>
        <member name="F:LitJson.JsonToken.String">
        </member>
        <member name="F:LitJson.JsonToken.Boolean">
        </member>
        <member name="F:LitJson.JsonToken.Null">
        </member>
        <member name="T:LitJson.JsonReader">
             JsonReader.cs
               Stream-like access to JSON text.
            
             This file was modified from the original to not use System.Collection.Generics namespace.
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="M:LitJson.JsonReader.#ctor(System.String)">
        </member>
        <member name="M:LitJson.JsonReader.#ctor(System.IO.TextReader)">
        </member>
        <member name="M:LitJson.JsonReader.Close">
        </member>
        <member name="M:LitJson.JsonReader.Read">
        </member>
        <member name="P:LitJson.JsonReader.AllowComments">
        </member>
        <member name="P:LitJson.JsonReader.AllowSingleQuotedStrings">
        </member>
        <member name="P:LitJson.JsonReader.EndOfInput">
        </member>
        <member name="P:LitJson.JsonReader.EndOfJson">
        </member>
        <member name="P:LitJson.JsonReader.Token">
        </member>
        <member name="P:LitJson.JsonReader.Value">
        </member>
        <member name="T:LitJson.JsonWriter">
             JsonWriter.cs
               Stream-like facility to output JSON text.
            
             This file was modified from the original to not use System.Collection.Generics namespace.
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="M:LitJson.JsonWriter.#ctor">
        </member>
        <member name="M:LitJson.JsonWriter.#ctor(System.Text.StringBuilder)">
        </member>
        <member name="M:LitJson.JsonWriter.#ctor(System.IO.TextWriter)">
        </member>
        <member name="M:LitJson.JsonWriter.ToString">
        </member>
        <member name="M:LitJson.JsonWriter.Reset">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.Boolean)">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.Decimal)">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.Double)">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.Int32)">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.Int64)">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.String)">
        </member>
        <member name="M:LitJson.JsonWriter.Write(System.UInt64)">
        </member>
        <member name="M:LitJson.JsonWriter.WriteArrayEnd">
        </member>
        <member name="M:LitJson.JsonWriter.WriteArrayStart">
        </member>
        <member name="M:LitJson.JsonWriter.WriteObjectEnd">
        </member>
        <member name="M:LitJson.JsonWriter.WriteObjectStart">
        </member>
        <member name="M:LitJson.JsonWriter.WritePropertyName(System.String)">
        </member>
        <member name="P:LitJson.JsonWriter.IndentValue">
        </member>
        <member name="P:LitJson.JsonWriter.PrettyPrint">
        </member>
        <member name="P:LitJson.JsonWriter.TextWriter">
        </member>
        <member name="P:LitJson.JsonWriter.Validate">
        </member>
        <member name="T:LitJson.JsonKeyValuePair">
        </member>
        <member name="M:LitJson.JsonKeyValuePair.#ctor(System.String,LitJson.JsonData)">
        </member>
        <member name="P:LitJson.JsonKeyValuePair.Value">
        </member>
        <member name="P:LitJson.JsonKeyValuePair.Key">
        </member>
        <member name="T:LitJson.JsonData">
             JsonData.cs
               Generic type to hold JSON data (objects, arrays, and so on). This is
               the default type returned by JsonMapper.ToObject().
            
             This file was modified from the original to not use System.Collection.Generics namespace.	
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="T:LitJson.IJsonWrapper">
             IJsonWrapper.cs
               Interface that represents a type capable of handling all kinds of JSON
               data. This is mainly used when mapping objects through JsonMapper, and
               it's implemented by JsonData.
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="M:LitJson.IJsonWrapper.GetBoolean">
        </member>
        <member name="M:LitJson.IJsonWrapper.GetDouble">
        </member>
        <member name="M:LitJson.IJsonWrapper.GetInt">
        </member>
        <member name="M:LitJson.IJsonWrapper.GetJsonType">
        </member>
        <member name="M:LitJson.IJsonWrapper.GetLong">
        </member>
        <member name="M:LitJson.IJsonWrapper.GetString">
        </member>
        <member name="M:LitJson.IJsonWrapper.SetBoolean(System.Boolean)">
        </member>
        <member name="M:LitJson.IJsonWrapper.SetDouble(System.Double)">
        </member>
        <member name="M:LitJson.IJsonWrapper.SetInt(System.Int32)">
        </member>
        <member name="M:LitJson.IJsonWrapper.SetJsonType(LitJson.JsonType)">
        </member>
        <member name="M:LitJson.IJsonWrapper.SetLong(System.Int64)">
        </member>
        <member name="M:LitJson.IJsonWrapper.SetString(System.String)">
        </member>
        <member name="M:LitJson.IJsonWrapper.ToJson">
        </member>
        <member name="M:LitJson.IJsonWrapper.ToJson(LitJson.JsonWriter)">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsArray">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsBoolean">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsDouble">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsInt">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsLong">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsObject">
        </member>
        <member name="P:LitJson.IJsonWrapper.IsString">
        </member>
        <member name="M:LitJson.JsonData.Contains(System.Object)">
        </member>
        <member name="M:LitJson.JsonData.#ctor">
        </member>
        <member name="M:LitJson.JsonData.#ctor(System.Boolean)">
        </member>
        <member name="M:LitJson.JsonData.#ctor(System.Double)">
        </member>
        <member name="M:LitJson.JsonData.#ctor(System.Int32)">
        </member>
        <member name="M:LitJson.JsonData.#ctor(System.Int64)">
        </member>
        <member name="M:LitJson.JsonData.#ctor(System.Object)">
        </member>
        <member name="M:LitJson.JsonData.#ctor(System.String)">
        </member>
        <member name="M:LitJson.JsonData.op_Implicit(System.Boolean)~LitJson.JsonData">
        </member>
        <member name="M:LitJson.JsonData.op_Implicit(System.Double)~LitJson.JsonData">
        </member>
        <member name="M:LitJson.JsonData.op_Implicit(System.Int32)~LitJson.JsonData">
        </member>
        <member name="M:LitJson.JsonData.op_Implicit(System.Int64)~LitJson.JsonData">
        </member>
        <member name="M:LitJson.JsonData.op_Implicit(System.String)~LitJson.JsonData">
        </member>
        <member name="M:LitJson.JsonData.op_Explicit(LitJson.JsonData)~System.Boolean">
        </member>
        <member name="M:LitJson.JsonData.op_Explicit(LitJson.JsonData)~System.Double">
        </member>
        <member name="M:LitJson.JsonData.op_Explicit(LitJson.JsonData)~System.Int32">
        </member>
        <member name="M:LitJson.JsonData.op_Explicit(LitJson.JsonData)~System.Int64">
        </member>
        <member name="M:LitJson.JsonData.op_Explicit(LitJson.JsonData)~System.String">
        </member>
        <member name="M:LitJson.JsonData.Add(System.Object)">
        </member>
        <member name="M:LitJson.JsonData.Clear">
        </member>
        <member name="M:LitJson.JsonData.CompareTo(System.Object)">
        </member>
        <member name="M:LitJson.JsonData.GetJsonType">
        </member>
        <member name="M:LitJson.JsonData.SetJsonType(LitJson.JsonType)">
        </member>
        <member name="M:LitJson.JsonData.ToJson">
        </member>
        <member name="M:LitJson.JsonData.ToJson(LitJson.JsonWriter)">
        </member>
        <member name="M:LitJson.JsonData.ToString">
        </member>
        <member name="P:LitJson.JsonData.Count">
        </member>
        <member name="P:LitJson.JsonData.IsArray">
        </member>
        <member name="P:LitJson.JsonData.IsBoolean">
        </member>
        <member name="P:LitJson.JsonData.IsDouble">
        </member>
        <member name="P:LitJson.JsonData.IsInt">
        </member>
        <member name="P:LitJson.JsonData.IsLong">
        </member>
        <member name="P:LitJson.JsonData.IsObject">
        </member>
        <member name="P:LitJson.JsonData.IsString">
        </member>
        <member name="P:LitJson.JsonData.Item(System.String)">
        </member>
        <member name="P:LitJson.JsonData.Item(System.Int32)">
        </member>
        <member name="T:LitJson.ParserToken">
             ParserToken.cs
               Internal representation of the tokens used by the lexer and the parser.
            
             The authors disclaim copyright to this source code. For more details, see
             the COPYING file included with this distribution.
            
        </member>
        <member name="T:LitJson.JsonType">
        </member>
        <member name="F:LitJson.JsonType.None">
        </member>
        <member name="F:LitJson.JsonType.Object">
        </member>
        <member name="F:LitJson.JsonType.Array">
        </member>
        <member name="F:LitJson.JsonType.String">
        </member>
        <member name="F:LitJson.JsonType.Int">
        </member>
        <member name="F:LitJson.JsonType.Long">
        </member>
        <member name="F:LitJson.JsonType.Double">
        </member>
        <member name="F:LitJson.JsonType.Boolean">
        </member>
        <member name="T:SmartFoxClientAPI.Http.HttpEvent">
            <summary>HttpEvent class</summary>
            
            <remarks>
            <para><b>Version:</b><br/>
            1.0.0</para>
            
            <para><b>Author:</b><br/>
            Thomas Hentschel Lund<br/>
            			<a href="http://www.fullcontrol.dk">http://www.fullcontrol.dk</a><br/>
            			<a href="mailto:sfs-api@fullcontrol.dk">sfs-api@fullcontrol.dk</a><p/>
            (c) 2008 gotoAndPlay()<br/>
                     <a href="http://www.smartfoxserver.com">http://www.smartfoxserver.com</a><br/>
            			<a href="http://www.gotoandplay.it">http://www.gotoandplay.it</a><br/>
            </para>
            </remarks>
        </member>
        <member name="F:SmartFoxClientAPI.Http.HttpEvent.onHttpData">
            <summary>Event fired when data is received</summary>
        </member>
        <member name="F:SmartFoxClientAPI.Http.HttpEvent.onHttpError">
            <summary>Event fired when error is received on connection</summary>
        </member>
        <member name="F:SmartFoxClientAPI.Http.HttpEvent.onHttpConnect">
            <summary>Event fired on connection</summary>
        </member>
        <member name="F:SmartFoxClientAPI.Http.HttpEvent.onHttpClose">
            <summary>Event fired when connection is closed</summary>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpEvent.#ctor(System.String,System.Collections.Hashtable)">
            <summary>HttpEvent contructor.</summary>
            
            <param name="type">the event's type (see the constants in this class).</param>
            <param name="parameters">the parameters object for the event.</param>
            @exclude
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpEvent.GetType">
            <summary>
            Get type of event
            </summary>
            
            <returns>Type of event</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
        <member name="M:SmartFoxClientAPI.Http.HttpEvent.GetParameter(System.String)">
            <summary>
            Get a specific parameter for the event
            </summary>
            
            <returns>Requested parameter</returns>
            
            <remarks>
            <b>Version:</b><br/>
            SmartFoxServer Basic / Pro
            </remarks>
        </member>
    </members>
</doc>
